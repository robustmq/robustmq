/**
 * @fileoverview gRPC-Web generated client stub for placement.center.openraft
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: openraft.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as openraft_pb from './openraft_pb'; // proto import: "openraft.proto"


export class OpenRaftServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorvote = new grpcWeb.MethodDescriptor(
    '/placement.center.openraft.OpenRaftService/vote',
    grpcWeb.MethodType.UNARY,
    openraft_pb.VoteRequest,
    openraft_pb.VoteReply,
    (request: openraft_pb.VoteRequest) => {
      return request.serializeBinary();
    },
    openraft_pb.VoteReply.deserializeBinary
  );

  vote(
    request: openraft_pb.VoteRequest,
    metadata?: grpcWeb.Metadata | null): Promise<openraft_pb.VoteReply>;

  vote(
    request: openraft_pb.VoteRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: openraft_pb.VoteReply) => void): grpcWeb.ClientReadableStream<openraft_pb.VoteReply>;

  vote(
    request: openraft_pb.VoteRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: openraft_pb.VoteReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.openraft.OpenRaftService/vote',
        request,
        metadata || {},
        this.methodDescriptorvote,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.openraft.OpenRaftService/vote',
    request,
    metadata || {},
    this.methodDescriptorvote);
  }

  methodDescriptorappend = new grpcWeb.MethodDescriptor(
    '/placement.center.openraft.OpenRaftService/append',
    grpcWeb.MethodType.UNARY,
    openraft_pb.AppendRequest,
    openraft_pb.AppendReply,
    (request: openraft_pb.AppendRequest) => {
      return request.serializeBinary();
    },
    openraft_pb.AppendReply.deserializeBinary
  );

  append(
    request: openraft_pb.AppendRequest,
    metadata?: grpcWeb.Metadata | null): Promise<openraft_pb.AppendReply>;

  append(
    request: openraft_pb.AppendRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: openraft_pb.AppendReply) => void): grpcWeb.ClientReadableStream<openraft_pb.AppendReply>;

  append(
    request: openraft_pb.AppendRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: openraft_pb.AppendReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.openraft.OpenRaftService/append',
        request,
        metadata || {},
        this.methodDescriptorappend,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.openraft.OpenRaftService/append',
    request,
    metadata || {},
    this.methodDescriptorappend);
  }

  methodDescriptorsnapshot = new grpcWeb.MethodDescriptor(
    '/placement.center.openraft.OpenRaftService/snapshot',
    grpcWeb.MethodType.UNARY,
    openraft_pb.SnapshotRequest,
    openraft_pb.SnapshotReply,
    (request: openraft_pb.SnapshotRequest) => {
      return request.serializeBinary();
    },
    openraft_pb.SnapshotReply.deserializeBinary
  );

  snapshot(
    request: openraft_pb.SnapshotRequest,
    metadata?: grpcWeb.Metadata | null): Promise<openraft_pb.SnapshotReply>;

  snapshot(
    request: openraft_pb.SnapshotRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: openraft_pb.SnapshotReply) => void): grpcWeb.ClientReadableStream<openraft_pb.SnapshotReply>;

  snapshot(
    request: openraft_pb.SnapshotRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: openraft_pb.SnapshotReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.openraft.OpenRaftService/snapshot',
        request,
        metadata || {},
        this.methodDescriptorsnapshot,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.openraft.OpenRaftService/snapshot',
    request,
    metadata || {},
    this.methodDescriptorsnapshot);
  }

  methodDescriptoradd_learner = new grpcWeb.MethodDescriptor(
    '/placement.center.openraft.OpenRaftService/add_learner',
    grpcWeb.MethodType.UNARY,
    openraft_pb.AddLearnerRequest,
    openraft_pb.AddLearnerReply,
    (request: openraft_pb.AddLearnerRequest) => {
      return request.serializeBinary();
    },
    openraft_pb.AddLearnerReply.deserializeBinary
  );

  add_learner(
    request: openraft_pb.AddLearnerRequest,
    metadata?: grpcWeb.Metadata | null): Promise<openraft_pb.AddLearnerReply>;

  add_learner(
    request: openraft_pb.AddLearnerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: openraft_pb.AddLearnerReply) => void): grpcWeb.ClientReadableStream<openraft_pb.AddLearnerReply>;

  add_learner(
    request: openraft_pb.AddLearnerRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: openraft_pb.AddLearnerReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.openraft.OpenRaftService/add_learner',
        request,
        metadata || {},
        this.methodDescriptoradd_learner,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.openraft.OpenRaftService/add_learner',
    request,
    metadata || {},
    this.methodDescriptoradd_learner);
  }

  methodDescriptorchange_membership = new grpcWeb.MethodDescriptor(
    '/placement.center.openraft.OpenRaftService/change_membership',
    grpcWeb.MethodType.UNARY,
    openraft_pb.ChangeMembershipRequest,
    openraft_pb.ChangeMembershipReply,
    (request: openraft_pb.ChangeMembershipRequest) => {
      return request.serializeBinary();
    },
    openraft_pb.ChangeMembershipReply.deserializeBinary
  );

  change_membership(
    request: openraft_pb.ChangeMembershipRequest,
    metadata?: grpcWeb.Metadata | null): Promise<openraft_pb.ChangeMembershipReply>;

  change_membership(
    request: openraft_pb.ChangeMembershipRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: openraft_pb.ChangeMembershipReply) => void): grpcWeb.ClientReadableStream<openraft_pb.ChangeMembershipReply>;

  change_membership(
    request: openraft_pb.ChangeMembershipRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: openraft_pb.ChangeMembershipReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.openraft.OpenRaftService/change_membership',
        request,
        metadata || {},
        this.methodDescriptorchange_membership,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.openraft.OpenRaftService/change_membership',
    request,
    metadata || {},
    this.methodDescriptorchange_membership);
  }

}

