// source: engine.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.journal.engine.ApiKey', null, global);
goog.exportSymbol('proto.journal.engine.ApiVersion', null, global);
goog.exportSymbol('proto.journal.engine.AutoOffsetStrategy', null, global);
goog.exportSymbol('proto.journal.engine.ClientSegmentMetadata', null, global);
goog.exportSymbol('proto.journal.engine.CreateShardReq', null, global);
goog.exportSymbol('proto.journal.engine.CreateShardReqBody', null, global);
goog.exportSymbol('proto.journal.engine.CreateShardResp', null, global);
goog.exportSymbol('proto.journal.engine.CreateShardRespBody', null, global);
goog.exportSymbol('proto.journal.engine.DeleteShardReq', null, global);
goog.exportSymbol('proto.journal.engine.DeleteShardReqBody', null, global);
goog.exportSymbol('proto.journal.engine.DeleteShardResp', null, global);
goog.exportSymbol('proto.journal.engine.DeleteShardRespBody', null, global);
goog.exportSymbol('proto.journal.engine.FetchOffsetReq', null, global);
goog.exportSymbol('proto.journal.engine.FetchOffsetReqBody', null, global);
goog.exportSymbol('proto.journal.engine.FetchOffsetResp', null, global);
goog.exportSymbol('proto.journal.engine.FetchOffsetRespBody', null, global);
goog.exportSymbol('proto.journal.engine.FetchOffsetShard', null, global);
goog.exportSymbol('proto.journal.engine.FetchOffsetShardMeta', null, global);
goog.exportSymbol('proto.journal.engine.GetClusterMetadataNode', null, global);
goog.exportSymbol('proto.journal.engine.GetClusterMetadataReq', null, global);
goog.exportSymbol('proto.journal.engine.GetClusterMetadataResp', null, global);
goog.exportSymbol('proto.journal.engine.GetClusterMetadataRespBody', null, global);
goog.exportSymbol('proto.journal.engine.GetShardMetadataReq', null, global);
goog.exportSymbol('proto.journal.engine.GetShardMetadataReqBody', null, global);
goog.exportSymbol('proto.journal.engine.GetShardMetadataReqShard', null, global);
goog.exportSymbol('proto.journal.engine.GetShardMetadataResp', null, global);
goog.exportSymbol('proto.journal.engine.GetShardMetadataRespBody', null, global);
goog.exportSymbol('proto.journal.engine.GetShardMetadataRespShard', null, global);
goog.exportSymbol('proto.journal.engine.JournalEngineError', null, global);
goog.exportSymbol('proto.journal.engine.ReadReq', null, global);
goog.exportSymbol('proto.journal.engine.ReadReqBody', null, global);
goog.exportSymbol('proto.journal.engine.ReadReqFilter', null, global);
goog.exportSymbol('proto.journal.engine.ReadReqMessage', null, global);
goog.exportSymbol('proto.journal.engine.ReadReqOptions', null, global);
goog.exportSymbol('proto.journal.engine.ReadResp', null, global);
goog.exportSymbol('proto.journal.engine.ReadRespBody', null, global);
goog.exportSymbol('proto.journal.engine.ReadRespMessage', null, global);
goog.exportSymbol('proto.journal.engine.ReadRespSegmentMessage', null, global);
goog.exportSymbol('proto.journal.engine.ReadType', null, global);
goog.exportSymbol('proto.journal.engine.ReqHeader', null, global);
goog.exportSymbol('proto.journal.engine.RespHeader', null, global);
goog.exportSymbol('proto.journal.engine.WriteReq', null, global);
goog.exportSymbol('proto.journal.engine.WriteReqBody', null, global);
goog.exportSymbol('proto.journal.engine.WriteReqMessages', null, global);
goog.exportSymbol('proto.journal.engine.WriteReqSegmentMessages', null, global);
goog.exportSymbol('proto.journal.engine.WriteResp', null, global);
goog.exportSymbol('proto.journal.engine.WriteRespBody', null, global);
goog.exportSymbol('proto.journal.engine.WriteRespMessage', null, global);
goog.exportSymbol('proto.journal.engine.WriteRespMessageStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.JournalEngineError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.JournalEngineError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.JournalEngineError.displayName = 'proto.journal.engine.JournalEngineError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReqHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.ReqHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReqHeader.displayName = 'proto.journal.engine.ReqHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.RespHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.RespHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.RespHeader.displayName = 'proto.journal.engine.RespHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ClientSegmentMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.ClientSegmentMetadata.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.ClientSegmentMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ClientSegmentMetadata.displayName = 'proto.journal.engine.ClientSegmentMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetClusterMetadataReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.GetClusterMetadataReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetClusterMetadataReq.displayName = 'proto.journal.engine.GetClusterMetadataReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetClusterMetadataRespBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.GetClusterMetadataRespBody.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.GetClusterMetadataRespBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetClusterMetadataRespBody.displayName = 'proto.journal.engine.GetClusterMetadataRespBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetClusterMetadataNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.GetClusterMetadataNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetClusterMetadataNode.displayName = 'proto.journal.engine.GetClusterMetadataNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetClusterMetadataResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.GetClusterMetadataResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetClusterMetadataResp.displayName = 'proto.journal.engine.GetClusterMetadataResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.CreateShardReqBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.CreateShardReqBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.CreateShardReqBody.displayName = 'proto.journal.engine.CreateShardReqBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.CreateShardRespBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.CreateShardRespBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.CreateShardRespBody.displayName = 'proto.journal.engine.CreateShardRespBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.CreateShardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.CreateShardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.CreateShardReq.displayName = 'proto.journal.engine.CreateShardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.CreateShardResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.CreateShardResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.CreateShardResp.displayName = 'proto.journal.engine.CreateShardResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.DeleteShardReqBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.DeleteShardReqBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.DeleteShardReqBody.displayName = 'proto.journal.engine.DeleteShardReqBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.DeleteShardRespBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.DeleteShardRespBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.DeleteShardRespBody.displayName = 'proto.journal.engine.DeleteShardRespBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.DeleteShardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.DeleteShardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.DeleteShardReq.displayName = 'proto.journal.engine.DeleteShardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.DeleteShardResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.DeleteShardResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.DeleteShardResp.displayName = 'proto.journal.engine.DeleteShardResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetShardMetadataReqBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.GetShardMetadataReqBody.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.GetShardMetadataReqBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetShardMetadataReqBody.displayName = 'proto.journal.engine.GetShardMetadataReqBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetShardMetadataReqShard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.GetShardMetadataReqShard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetShardMetadataReqShard.displayName = 'proto.journal.engine.GetShardMetadataReqShard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetShardMetadataReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.GetShardMetadataReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetShardMetadataReq.displayName = 'proto.journal.engine.GetShardMetadataReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetShardMetadataRespBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.GetShardMetadataRespBody.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.GetShardMetadataRespBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetShardMetadataRespBody.displayName = 'proto.journal.engine.GetShardMetadataRespBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetShardMetadataRespShard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.GetShardMetadataRespShard.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.GetShardMetadataRespShard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetShardMetadataRespShard.displayName = 'proto.journal.engine.GetShardMetadataRespShard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.GetShardMetadataResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.GetShardMetadataResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.GetShardMetadataResp.displayName = 'proto.journal.engine.GetShardMetadataResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.WriteReqBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.WriteReqBody.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.WriteReqBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.WriteReqBody.displayName = 'proto.journal.engine.WriteReqBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.WriteReqSegmentMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.WriteReqSegmentMessages.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.WriteReqSegmentMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.WriteReqSegmentMessages.displayName = 'proto.journal.engine.WriteReqSegmentMessages';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.WriteReqMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.WriteReqMessages.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.WriteReqMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.WriteReqMessages.displayName = 'proto.journal.engine.WriteReqMessages';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.WriteRespBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.WriteRespBody.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.WriteRespBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.WriteRespBody.displayName = 'proto.journal.engine.WriteRespBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.WriteRespMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.WriteRespMessage.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.WriteRespMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.WriteRespMessage.displayName = 'proto.journal.engine.WriteRespMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.WriteRespMessageStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.WriteRespMessageStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.WriteRespMessageStatus.displayName = 'proto.journal.engine.WriteRespMessageStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.WriteReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.WriteReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.WriteReq.displayName = 'proto.journal.engine.WriteReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.WriteResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.WriteResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.WriteResp.displayName = 'proto.journal.engine.WriteResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReadReqBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.ReadReqBody.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.ReadReqBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReadReqBody.displayName = 'proto.journal.engine.ReadReqBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReadReqMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.ReadReqMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReadReqMessage.displayName = 'proto.journal.engine.ReadReqMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReadReqFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.ReadReqFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReadReqFilter.displayName = 'proto.journal.engine.ReadReqFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReadReqOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.ReadReqOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReadReqOptions.displayName = 'proto.journal.engine.ReadReqOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReadRespBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.ReadRespBody.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.ReadRespBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReadRespBody.displayName = 'proto.journal.engine.ReadRespBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReadRespSegmentMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.ReadRespSegmentMessage.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.ReadRespSegmentMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReadRespSegmentMessage.displayName = 'proto.journal.engine.ReadRespSegmentMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReadRespMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.ReadRespMessage.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.ReadRespMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReadRespMessage.displayName = 'proto.journal.engine.ReadRespMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReadReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.ReadReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReadReq.displayName = 'proto.journal.engine.ReadReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.ReadResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.ReadResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.ReadResp.displayName = 'proto.journal.engine.ReadResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.FetchOffsetReqBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.FetchOffsetReqBody.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.FetchOffsetReqBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.FetchOffsetReqBody.displayName = 'proto.journal.engine.FetchOffsetReqBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.FetchOffsetShard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.FetchOffsetShard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.FetchOffsetShard.displayName = 'proto.journal.engine.FetchOffsetShard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.FetchOffsetReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.FetchOffsetReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.FetchOffsetReq.displayName = 'proto.journal.engine.FetchOffsetReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.FetchOffsetRespBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.journal.engine.FetchOffsetRespBody.repeatedFields_, null);
};
goog.inherits(proto.journal.engine.FetchOffsetRespBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.FetchOffsetRespBody.displayName = 'proto.journal.engine.FetchOffsetRespBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.FetchOffsetShardMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.FetchOffsetShardMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.FetchOffsetShardMeta.displayName = 'proto.journal.engine.FetchOffsetShardMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.journal.engine.FetchOffsetResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.journal.engine.FetchOffsetResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.journal.engine.FetchOffsetResp.displayName = 'proto.journal.engine.FetchOffsetResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.JournalEngineError.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.JournalEngineError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.JournalEngineError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.JournalEngineError.toObject = function(includeInstance, msg) {
  var f, obj = {
code: jspb.Message.getFieldWithDefault(msg, 1, ""),
error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.JournalEngineError}
 */
proto.journal.engine.JournalEngineError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.JournalEngineError;
  return proto.journal.engine.JournalEngineError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.JournalEngineError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.JournalEngineError}
 */
proto.journal.engine.JournalEngineError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.JournalEngineError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.JournalEngineError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.JournalEngineError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.JournalEngineError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.journal.engine.JournalEngineError.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.JournalEngineError} returns this
 */
proto.journal.engine.JournalEngineError.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.journal.engine.JournalEngineError.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.JournalEngineError} returns this
 */
proto.journal.engine.JournalEngineError.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReqHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReqHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReqHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReqHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
apiKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
apiVersion: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReqHeader}
 */
proto.journal.engine.ReqHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReqHeader;
  return proto.journal.engine.ReqHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReqHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReqHeader}
 */
proto.journal.engine.ReqHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.journal.engine.ApiKey} */ (reader.readEnum());
      msg.setApiKey(value);
      break;
    case 2:
      var value = /** @type {!proto.journal.engine.ApiVersion} */ (reader.readEnum());
      msg.setApiVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReqHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReqHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReqHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReqHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiKey();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getApiVersion();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ApiKey api_key = 1;
 * @return {!proto.journal.engine.ApiKey}
 */
proto.journal.engine.ReqHeader.prototype.getApiKey = function() {
  return /** @type {!proto.journal.engine.ApiKey} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.journal.engine.ApiKey} value
 * @return {!proto.journal.engine.ReqHeader} returns this
 */
proto.journal.engine.ReqHeader.prototype.setApiKey = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ApiVersion api_version = 2;
 * @return {!proto.journal.engine.ApiVersion}
 */
proto.journal.engine.ReqHeader.prototype.getApiVersion = function() {
  return /** @type {!proto.journal.engine.ApiVersion} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.journal.engine.ApiVersion} value
 * @return {!proto.journal.engine.ReqHeader} returns this
 */
proto.journal.engine.ReqHeader.prototype.setApiVersion = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.RespHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.RespHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.RespHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.RespHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
apiKey: jspb.Message.getFieldWithDefault(msg, 1, 0),
apiVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
error: (f = msg.getError()) && proto.journal.engine.JournalEngineError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.RespHeader}
 */
proto.journal.engine.RespHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.RespHeader;
  return proto.journal.engine.RespHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.RespHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.RespHeader}
 */
proto.journal.engine.RespHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.journal.engine.ApiKey} */ (reader.readEnum());
      msg.setApiKey(value);
      break;
    case 2:
      var value = /** @type {!proto.journal.engine.ApiVersion} */ (reader.readEnum());
      msg.setApiVersion(value);
      break;
    case 3:
      var value = new proto.journal.engine.JournalEngineError;
      reader.readMessage(value,proto.journal.engine.JournalEngineError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.RespHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.RespHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.RespHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.RespHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiKey();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getApiVersion();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.journal.engine.JournalEngineError.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApiKey api_key = 1;
 * @return {!proto.journal.engine.ApiKey}
 */
proto.journal.engine.RespHeader.prototype.getApiKey = function() {
  return /** @type {!proto.journal.engine.ApiKey} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.journal.engine.ApiKey} value
 * @return {!proto.journal.engine.RespHeader} returns this
 */
proto.journal.engine.RespHeader.prototype.setApiKey = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ApiVersion api_version = 2;
 * @return {!proto.journal.engine.ApiVersion}
 */
proto.journal.engine.RespHeader.prototype.getApiVersion = function() {
  return /** @type {!proto.journal.engine.ApiVersion} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.journal.engine.ApiVersion} value
 * @return {!proto.journal.engine.RespHeader} returns this
 */
proto.journal.engine.RespHeader.prototype.setApiVersion = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional JournalEngineError error = 3;
 * @return {?proto.journal.engine.JournalEngineError}
 */
proto.journal.engine.RespHeader.prototype.getError = function() {
  return /** @type{?proto.journal.engine.JournalEngineError} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.JournalEngineError, 3));
};


/**
 * @param {?proto.journal.engine.JournalEngineError|undefined} value
 * @return {!proto.journal.engine.RespHeader} returns this
*/
proto.journal.engine.RespHeader.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.RespHeader} returns this
 */
proto.journal.engine.RespHeader.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.RespHeader.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.ClientSegmentMetadata.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ClientSegmentMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ClientSegmentMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ClientSegmentMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ClientSegmentMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
segmentNo: jspb.Message.getFieldWithDefault(msg, 1, 0),
leader: jspb.Message.getFieldWithDefault(msg, 2, 0),
replicasList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
startOffset: jspb.Message.getFieldWithDefault(msg, 4, 0),
endOffset: jspb.Message.getFieldWithDefault(msg, 5, 0),
startTimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
endTimestamp: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ClientSegmentMetadata}
 */
proto.journal.engine.ClientSegmentMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ClientSegmentMetadata;
  return proto.journal.engine.ClientSegmentMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ClientSegmentMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ClientSegmentMetadata}
 */
proto.journal.engine.ClientSegmentMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSegmentNo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLeader(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addReplicas(values[i]);
      }
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndOffset(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ClientSegmentMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ClientSegmentMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ClientSegmentMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ClientSegmentMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentNo();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLeader();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getReplicasList();
  if (f.length > 0) {
    writer.writePackedUint64(
      3,
      f
    );
  }
  f = message.getStartOffset();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEndOffset();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getStartTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getEndTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional uint32 segment_no = 1;
 * @return {number}
 */
proto.journal.engine.ClientSegmentMetadata.prototype.getSegmentNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ClientSegmentMetadata} returns this
 */
proto.journal.engine.ClientSegmentMetadata.prototype.setSegmentNo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 leader = 2;
 * @return {number}
 */
proto.journal.engine.ClientSegmentMetadata.prototype.getLeader = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ClientSegmentMetadata} returns this
 */
proto.journal.engine.ClientSegmentMetadata.prototype.setLeader = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated uint64 replicas = 3;
 * @return {!Array<number>}
 */
proto.journal.engine.ClientSegmentMetadata.prototype.getReplicasList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.journal.engine.ClientSegmentMetadata} returns this
 */
proto.journal.engine.ClientSegmentMetadata.prototype.setReplicasList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.ClientSegmentMetadata} returns this
 */
proto.journal.engine.ClientSegmentMetadata.prototype.addReplicas = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.ClientSegmentMetadata} returns this
 */
proto.journal.engine.ClientSegmentMetadata.prototype.clearReplicasList = function() {
  return this.setReplicasList([]);
};


/**
 * optional int64 start_offset = 4;
 * @return {number}
 */
proto.journal.engine.ClientSegmentMetadata.prototype.getStartOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ClientSegmentMetadata} returns this
 */
proto.journal.engine.ClientSegmentMetadata.prototype.setStartOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 end_offset = 5;
 * @return {number}
 */
proto.journal.engine.ClientSegmentMetadata.prototype.getEndOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ClientSegmentMetadata} returns this
 */
proto.journal.engine.ClientSegmentMetadata.prototype.setEndOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 start_timestamp = 6;
 * @return {number}
 */
proto.journal.engine.ClientSegmentMetadata.prototype.getStartTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ClientSegmentMetadata} returns this
 */
proto.journal.engine.ClientSegmentMetadata.prototype.setStartTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 end_timestamp = 7;
 * @return {number}
 */
proto.journal.engine.ClientSegmentMetadata.prototype.getEndTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ClientSegmentMetadata} returns this
 */
proto.journal.engine.ClientSegmentMetadata.prototype.setEndTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetClusterMetadataReq.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetClusterMetadataReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetClusterMetadataReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetClusterMetadataReq.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.ReqHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetClusterMetadataReq}
 */
proto.journal.engine.GetClusterMetadataReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetClusterMetadataReq;
  return proto.journal.engine.GetClusterMetadataReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetClusterMetadataReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetClusterMetadataReq}
 */
proto.journal.engine.GetClusterMetadataReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.ReqHeader;
      reader.readMessage(value,proto.journal.engine.ReqHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetClusterMetadataReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetClusterMetadataReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetClusterMetadataReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetClusterMetadataReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.ReqHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReqHeader header = 1;
 * @return {?proto.journal.engine.ReqHeader}
 */
proto.journal.engine.GetClusterMetadataReq.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.ReqHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReqHeader, 1));
};


/**
 * @param {?proto.journal.engine.ReqHeader|undefined} value
 * @return {!proto.journal.engine.GetClusterMetadataReq} returns this
*/
proto.journal.engine.GetClusterMetadataReq.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.GetClusterMetadataReq} returns this
 */
proto.journal.engine.GetClusterMetadataReq.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.GetClusterMetadataReq.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.GetClusterMetadataRespBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetClusterMetadataRespBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetClusterMetadataRespBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetClusterMetadataRespBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetClusterMetadataRespBody.toObject = function(includeInstance, msg) {
  var f, obj = {
nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.journal.engine.GetClusterMetadataNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetClusterMetadataRespBody}
 */
proto.journal.engine.GetClusterMetadataRespBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetClusterMetadataRespBody;
  return proto.journal.engine.GetClusterMetadataRespBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetClusterMetadataRespBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetClusterMetadataRespBody}
 */
proto.journal.engine.GetClusterMetadataRespBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.GetClusterMetadataNode;
      reader.readMessage(value,proto.journal.engine.GetClusterMetadataNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetClusterMetadataRespBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetClusterMetadataRespBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetClusterMetadataRespBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetClusterMetadataRespBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.journal.engine.GetClusterMetadataNode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetClusterMetadataNode nodes = 1;
 * @return {!Array<!proto.journal.engine.GetClusterMetadataNode>}
 */
proto.journal.engine.GetClusterMetadataRespBody.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.journal.engine.GetClusterMetadataNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.GetClusterMetadataNode, 1));
};


/**
 * @param {!Array<!proto.journal.engine.GetClusterMetadataNode>} value
 * @return {!proto.journal.engine.GetClusterMetadataRespBody} returns this
*/
proto.journal.engine.GetClusterMetadataRespBody.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.journal.engine.GetClusterMetadataNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.GetClusterMetadataNode}
 */
proto.journal.engine.GetClusterMetadataRespBody.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.journal.engine.GetClusterMetadataNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.GetClusterMetadataRespBody} returns this
 */
proto.journal.engine.GetClusterMetadataRespBody.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetClusterMetadataNode.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetClusterMetadataNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetClusterMetadataNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetClusterMetadataNode.toObject = function(includeInstance, msg) {
  var f, obj = {
nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
tcpAddr: jspb.Message.getFieldWithDefault(msg, 2, ""),
tcpsAddr: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetClusterMetadataNode}
 */
proto.journal.engine.GetClusterMetadataNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetClusterMetadataNode;
  return proto.journal.engine.GetClusterMetadataNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetClusterMetadataNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetClusterMetadataNode}
 */
proto.journal.engine.GetClusterMetadataNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpAddr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpsAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetClusterMetadataNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetClusterMetadataNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetClusterMetadataNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetClusterMetadataNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTcpAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTcpsAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 node_id = 1;
 * @return {number}
 */
proto.journal.engine.GetClusterMetadataNode.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.GetClusterMetadataNode} returns this
 */
proto.journal.engine.GetClusterMetadataNode.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string tcp_addr = 2;
 * @return {string}
 */
proto.journal.engine.GetClusterMetadataNode.prototype.getTcpAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.GetClusterMetadataNode} returns this
 */
proto.journal.engine.GetClusterMetadataNode.prototype.setTcpAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tcps_addr = 3;
 * @return {string}
 */
proto.journal.engine.GetClusterMetadataNode.prototype.getTcpsAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.GetClusterMetadataNode} returns this
 */
proto.journal.engine.GetClusterMetadataNode.prototype.setTcpsAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetClusterMetadataResp.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetClusterMetadataResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetClusterMetadataResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetClusterMetadataResp.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.RespHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.GetClusterMetadataRespBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetClusterMetadataResp}
 */
proto.journal.engine.GetClusterMetadataResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetClusterMetadataResp;
  return proto.journal.engine.GetClusterMetadataResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetClusterMetadataResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetClusterMetadataResp}
 */
proto.journal.engine.GetClusterMetadataResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.RespHeader;
      reader.readMessage(value,proto.journal.engine.RespHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.GetClusterMetadataRespBody;
      reader.readMessage(value,proto.journal.engine.GetClusterMetadataRespBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetClusterMetadataResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetClusterMetadataResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetClusterMetadataResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetClusterMetadataResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.RespHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.GetClusterMetadataRespBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional RespHeader header = 1;
 * @return {?proto.journal.engine.RespHeader}
 */
proto.journal.engine.GetClusterMetadataResp.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.RespHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.RespHeader, 1));
};


/**
 * @param {?proto.journal.engine.RespHeader|undefined} value
 * @return {!proto.journal.engine.GetClusterMetadataResp} returns this
*/
proto.journal.engine.GetClusterMetadataResp.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.GetClusterMetadataResp} returns this
 */
proto.journal.engine.GetClusterMetadataResp.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.GetClusterMetadataResp.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetClusterMetadataRespBody body = 2;
 * @return {?proto.journal.engine.GetClusterMetadataRespBody}
 */
proto.journal.engine.GetClusterMetadataResp.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.GetClusterMetadataRespBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.GetClusterMetadataRespBody, 2));
};


/**
 * @param {?proto.journal.engine.GetClusterMetadataRespBody|undefined} value
 * @return {!proto.journal.engine.GetClusterMetadataResp} returns this
*/
proto.journal.engine.GetClusterMetadataResp.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.GetClusterMetadataResp} returns this
 */
proto.journal.engine.GetClusterMetadataResp.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.GetClusterMetadataResp.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.CreateShardReqBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.CreateShardReqBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.CreateShardReqBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.CreateShardReqBody.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shardName: jspb.Message.getFieldWithDefault(msg, 2, ""),
replicaNum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.CreateShardReqBody}
 */
proto.journal.engine.CreateShardReqBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.CreateShardReqBody;
  return proto.journal.engine.CreateShardReqBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.CreateShardReqBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.CreateShardReqBody}
 */
proto.journal.engine.CreateShardReqBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplicaNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.CreateShardReqBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.CreateShardReqBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.CreateShardReqBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.CreateShardReqBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReplicaNum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.CreateShardReqBody.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.CreateShardReqBody} returns this
 */
proto.journal.engine.CreateShardReqBody.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard_name = 2;
 * @return {string}
 */
proto.journal.engine.CreateShardReqBody.prototype.getShardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.CreateShardReqBody} returns this
 */
proto.journal.engine.CreateShardReqBody.prototype.setShardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 replica_num = 3;
 * @return {number}
 */
proto.journal.engine.CreateShardReqBody.prototype.getReplicaNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.CreateShardReqBody} returns this
 */
proto.journal.engine.CreateShardReqBody.prototype.setReplicaNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.CreateShardRespBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.CreateShardRespBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.CreateShardRespBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.CreateShardRespBody.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.CreateShardRespBody}
 */
proto.journal.engine.CreateShardRespBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.CreateShardRespBody;
  return proto.journal.engine.CreateShardRespBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.CreateShardRespBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.CreateShardRespBody}
 */
proto.journal.engine.CreateShardRespBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.CreateShardRespBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.CreateShardRespBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.CreateShardRespBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.CreateShardRespBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.CreateShardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.CreateShardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.CreateShardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.CreateShardReq.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.ReqHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.CreateShardReqBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.CreateShardReq}
 */
proto.journal.engine.CreateShardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.CreateShardReq;
  return proto.journal.engine.CreateShardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.CreateShardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.CreateShardReq}
 */
proto.journal.engine.CreateShardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.ReqHeader;
      reader.readMessage(value,proto.journal.engine.ReqHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.CreateShardReqBody;
      reader.readMessage(value,proto.journal.engine.CreateShardReqBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.CreateShardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.CreateShardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.CreateShardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.CreateShardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.ReqHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.CreateShardReqBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReqHeader header = 1;
 * @return {?proto.journal.engine.ReqHeader}
 */
proto.journal.engine.CreateShardReq.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.ReqHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReqHeader, 1));
};


/**
 * @param {?proto.journal.engine.ReqHeader|undefined} value
 * @return {!proto.journal.engine.CreateShardReq} returns this
*/
proto.journal.engine.CreateShardReq.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.CreateShardReq} returns this
 */
proto.journal.engine.CreateShardReq.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.CreateShardReq.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CreateShardReqBody body = 2;
 * @return {?proto.journal.engine.CreateShardReqBody}
 */
proto.journal.engine.CreateShardReq.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.CreateShardReqBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.CreateShardReqBody, 2));
};


/**
 * @param {?proto.journal.engine.CreateShardReqBody|undefined} value
 * @return {!proto.journal.engine.CreateShardReq} returns this
*/
proto.journal.engine.CreateShardReq.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.CreateShardReq} returns this
 */
proto.journal.engine.CreateShardReq.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.CreateShardReq.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.CreateShardResp.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.CreateShardResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.CreateShardResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.CreateShardResp.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.RespHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.CreateShardRespBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.CreateShardResp}
 */
proto.journal.engine.CreateShardResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.CreateShardResp;
  return proto.journal.engine.CreateShardResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.CreateShardResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.CreateShardResp}
 */
proto.journal.engine.CreateShardResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.RespHeader;
      reader.readMessage(value,proto.journal.engine.RespHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.CreateShardRespBody;
      reader.readMessage(value,proto.journal.engine.CreateShardRespBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.CreateShardResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.CreateShardResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.CreateShardResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.CreateShardResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.RespHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.CreateShardRespBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional RespHeader header = 1;
 * @return {?proto.journal.engine.RespHeader}
 */
proto.journal.engine.CreateShardResp.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.RespHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.RespHeader, 1));
};


/**
 * @param {?proto.journal.engine.RespHeader|undefined} value
 * @return {!proto.journal.engine.CreateShardResp} returns this
*/
proto.journal.engine.CreateShardResp.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.CreateShardResp} returns this
 */
proto.journal.engine.CreateShardResp.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.CreateShardResp.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CreateShardRespBody body = 2;
 * @return {?proto.journal.engine.CreateShardRespBody}
 */
proto.journal.engine.CreateShardResp.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.CreateShardRespBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.CreateShardRespBody, 2));
};


/**
 * @param {?proto.journal.engine.CreateShardRespBody|undefined} value
 * @return {!proto.journal.engine.CreateShardResp} returns this
*/
proto.journal.engine.CreateShardResp.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.CreateShardResp} returns this
 */
proto.journal.engine.CreateShardResp.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.CreateShardResp.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.DeleteShardReqBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.DeleteShardReqBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.DeleteShardReqBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.DeleteShardReqBody.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shardName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.DeleteShardReqBody}
 */
proto.journal.engine.DeleteShardReqBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.DeleteShardReqBody;
  return proto.journal.engine.DeleteShardReqBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.DeleteShardReqBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.DeleteShardReqBody}
 */
proto.journal.engine.DeleteShardReqBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.DeleteShardReqBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.DeleteShardReqBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.DeleteShardReqBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.DeleteShardReqBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.DeleteShardReqBody.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.DeleteShardReqBody} returns this
 */
proto.journal.engine.DeleteShardReqBody.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard_name = 2;
 * @return {string}
 */
proto.journal.engine.DeleteShardReqBody.prototype.getShardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.DeleteShardReqBody} returns this
 */
proto.journal.engine.DeleteShardReqBody.prototype.setShardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.DeleteShardRespBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.DeleteShardRespBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.DeleteShardRespBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.DeleteShardRespBody.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.DeleteShardRespBody}
 */
proto.journal.engine.DeleteShardRespBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.DeleteShardRespBody;
  return proto.journal.engine.DeleteShardRespBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.DeleteShardRespBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.DeleteShardRespBody}
 */
proto.journal.engine.DeleteShardRespBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.DeleteShardRespBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.DeleteShardRespBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.DeleteShardRespBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.DeleteShardRespBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.DeleteShardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.DeleteShardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.DeleteShardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.DeleteShardReq.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.ReqHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.DeleteShardReqBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.DeleteShardReq}
 */
proto.journal.engine.DeleteShardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.DeleteShardReq;
  return proto.journal.engine.DeleteShardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.DeleteShardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.DeleteShardReq}
 */
proto.journal.engine.DeleteShardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.ReqHeader;
      reader.readMessage(value,proto.journal.engine.ReqHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.DeleteShardReqBody;
      reader.readMessage(value,proto.journal.engine.DeleteShardReqBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.DeleteShardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.DeleteShardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.DeleteShardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.DeleteShardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.ReqHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.DeleteShardReqBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReqHeader header = 1;
 * @return {?proto.journal.engine.ReqHeader}
 */
proto.journal.engine.DeleteShardReq.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.ReqHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReqHeader, 1));
};


/**
 * @param {?proto.journal.engine.ReqHeader|undefined} value
 * @return {!proto.journal.engine.DeleteShardReq} returns this
*/
proto.journal.engine.DeleteShardReq.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.DeleteShardReq} returns this
 */
proto.journal.engine.DeleteShardReq.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.DeleteShardReq.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeleteShardReqBody body = 2;
 * @return {?proto.journal.engine.DeleteShardReqBody}
 */
proto.journal.engine.DeleteShardReq.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.DeleteShardReqBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.DeleteShardReqBody, 2));
};


/**
 * @param {?proto.journal.engine.DeleteShardReqBody|undefined} value
 * @return {!proto.journal.engine.DeleteShardReq} returns this
*/
proto.journal.engine.DeleteShardReq.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.DeleteShardReq} returns this
 */
proto.journal.engine.DeleteShardReq.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.DeleteShardReq.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.DeleteShardResp.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.DeleteShardResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.DeleteShardResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.DeleteShardResp.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.RespHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.DeleteShardRespBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.DeleteShardResp}
 */
proto.journal.engine.DeleteShardResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.DeleteShardResp;
  return proto.journal.engine.DeleteShardResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.DeleteShardResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.DeleteShardResp}
 */
proto.journal.engine.DeleteShardResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.RespHeader;
      reader.readMessage(value,proto.journal.engine.RespHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.DeleteShardRespBody;
      reader.readMessage(value,proto.journal.engine.DeleteShardRespBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.DeleteShardResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.DeleteShardResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.DeleteShardResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.DeleteShardResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.RespHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.DeleteShardRespBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional RespHeader header = 1;
 * @return {?proto.journal.engine.RespHeader}
 */
proto.journal.engine.DeleteShardResp.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.RespHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.RespHeader, 1));
};


/**
 * @param {?proto.journal.engine.RespHeader|undefined} value
 * @return {!proto.journal.engine.DeleteShardResp} returns this
*/
proto.journal.engine.DeleteShardResp.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.DeleteShardResp} returns this
 */
proto.journal.engine.DeleteShardResp.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.DeleteShardResp.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeleteShardRespBody body = 2;
 * @return {?proto.journal.engine.DeleteShardRespBody}
 */
proto.journal.engine.DeleteShardResp.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.DeleteShardRespBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.DeleteShardRespBody, 2));
};


/**
 * @param {?proto.journal.engine.DeleteShardRespBody|undefined} value
 * @return {!proto.journal.engine.DeleteShardResp} returns this
*/
proto.journal.engine.DeleteShardResp.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.DeleteShardResp} returns this
 */
proto.journal.engine.DeleteShardResp.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.DeleteShardResp.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.GetShardMetadataReqBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetShardMetadataReqBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetShardMetadataReqBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetShardMetadataReqBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataReqBody.toObject = function(includeInstance, msg) {
  var f, obj = {
shardsList: jspb.Message.toObjectList(msg.getShardsList(),
    proto.journal.engine.GetShardMetadataReqShard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetShardMetadataReqBody}
 */
proto.journal.engine.GetShardMetadataReqBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetShardMetadataReqBody;
  return proto.journal.engine.GetShardMetadataReqBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetShardMetadataReqBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetShardMetadataReqBody}
 */
proto.journal.engine.GetShardMetadataReqBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.GetShardMetadataReqShard;
      reader.readMessage(value,proto.journal.engine.GetShardMetadataReqShard.deserializeBinaryFromReader);
      msg.addShards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetShardMetadataReqBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetShardMetadataReqBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetShardMetadataReqBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataReqBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.journal.engine.GetShardMetadataReqShard.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetShardMetadataReqShard shards = 1;
 * @return {!Array<!proto.journal.engine.GetShardMetadataReqShard>}
 */
proto.journal.engine.GetShardMetadataReqBody.prototype.getShardsList = function() {
  return /** @type{!Array<!proto.journal.engine.GetShardMetadataReqShard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.GetShardMetadataReqShard, 1));
};


/**
 * @param {!Array<!proto.journal.engine.GetShardMetadataReqShard>} value
 * @return {!proto.journal.engine.GetShardMetadataReqBody} returns this
*/
proto.journal.engine.GetShardMetadataReqBody.prototype.setShardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.journal.engine.GetShardMetadataReqShard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.GetShardMetadataReqShard}
 */
proto.journal.engine.GetShardMetadataReqBody.prototype.addShards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.journal.engine.GetShardMetadataReqShard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.GetShardMetadataReqBody} returns this
 */
proto.journal.engine.GetShardMetadataReqBody.prototype.clearShardsList = function() {
  return this.setShardsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetShardMetadataReqShard.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetShardMetadataReqShard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetShardMetadataReqShard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataReqShard.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shardName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetShardMetadataReqShard}
 */
proto.journal.engine.GetShardMetadataReqShard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetShardMetadataReqShard;
  return proto.journal.engine.GetShardMetadataReqShard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetShardMetadataReqShard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetShardMetadataReqShard}
 */
proto.journal.engine.GetShardMetadataReqShard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetShardMetadataReqShard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetShardMetadataReqShard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetShardMetadataReqShard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataReqShard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.GetShardMetadataReqShard.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.GetShardMetadataReqShard} returns this
 */
proto.journal.engine.GetShardMetadataReqShard.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard_name = 2;
 * @return {string}
 */
proto.journal.engine.GetShardMetadataReqShard.prototype.getShardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.GetShardMetadataReqShard} returns this
 */
proto.journal.engine.GetShardMetadataReqShard.prototype.setShardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetShardMetadataReq.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetShardMetadataReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetShardMetadataReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataReq.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.ReqHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.GetShardMetadataReqBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetShardMetadataReq}
 */
proto.journal.engine.GetShardMetadataReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetShardMetadataReq;
  return proto.journal.engine.GetShardMetadataReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetShardMetadataReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetShardMetadataReq}
 */
proto.journal.engine.GetShardMetadataReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.ReqHeader;
      reader.readMessage(value,proto.journal.engine.ReqHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.GetShardMetadataReqBody;
      reader.readMessage(value,proto.journal.engine.GetShardMetadataReqBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetShardMetadataReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetShardMetadataReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetShardMetadataReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.ReqHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.GetShardMetadataReqBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReqHeader header = 1;
 * @return {?proto.journal.engine.ReqHeader}
 */
proto.journal.engine.GetShardMetadataReq.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.ReqHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReqHeader, 1));
};


/**
 * @param {?proto.journal.engine.ReqHeader|undefined} value
 * @return {!proto.journal.engine.GetShardMetadataReq} returns this
*/
proto.journal.engine.GetShardMetadataReq.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.GetShardMetadataReq} returns this
 */
proto.journal.engine.GetShardMetadataReq.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.GetShardMetadataReq.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetShardMetadataReqBody body = 2;
 * @return {?proto.journal.engine.GetShardMetadataReqBody}
 */
proto.journal.engine.GetShardMetadataReq.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.GetShardMetadataReqBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.GetShardMetadataReqBody, 2));
};


/**
 * @param {?proto.journal.engine.GetShardMetadataReqBody|undefined} value
 * @return {!proto.journal.engine.GetShardMetadataReq} returns this
*/
proto.journal.engine.GetShardMetadataReq.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.GetShardMetadataReq} returns this
 */
proto.journal.engine.GetShardMetadataReq.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.GetShardMetadataReq.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.GetShardMetadataRespBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetShardMetadataRespBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetShardMetadataRespBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetShardMetadataRespBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataRespBody.toObject = function(includeInstance, msg) {
  var f, obj = {
shardsList: jspb.Message.toObjectList(msg.getShardsList(),
    proto.journal.engine.GetShardMetadataRespShard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetShardMetadataRespBody}
 */
proto.journal.engine.GetShardMetadataRespBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetShardMetadataRespBody;
  return proto.journal.engine.GetShardMetadataRespBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetShardMetadataRespBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetShardMetadataRespBody}
 */
proto.journal.engine.GetShardMetadataRespBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.GetShardMetadataRespShard;
      reader.readMessage(value,proto.journal.engine.GetShardMetadataRespShard.deserializeBinaryFromReader);
      msg.addShards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetShardMetadataRespBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetShardMetadataRespBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetShardMetadataRespBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataRespBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.journal.engine.GetShardMetadataRespShard.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetShardMetadataRespShard shards = 1;
 * @return {!Array<!proto.journal.engine.GetShardMetadataRespShard>}
 */
proto.journal.engine.GetShardMetadataRespBody.prototype.getShardsList = function() {
  return /** @type{!Array<!proto.journal.engine.GetShardMetadataRespShard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.GetShardMetadataRespShard, 1));
};


/**
 * @param {!Array<!proto.journal.engine.GetShardMetadataRespShard>} value
 * @return {!proto.journal.engine.GetShardMetadataRespBody} returns this
*/
proto.journal.engine.GetShardMetadataRespBody.prototype.setShardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.journal.engine.GetShardMetadataRespShard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.GetShardMetadataRespShard}
 */
proto.journal.engine.GetShardMetadataRespBody.prototype.addShards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.journal.engine.GetShardMetadataRespShard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.GetShardMetadataRespBody} returns this
 */
proto.journal.engine.GetShardMetadataRespBody.prototype.clearShardsList = function() {
  return this.setShardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.GetShardMetadataRespShard.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetShardMetadataRespShard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetShardMetadataRespShard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataRespShard.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shard: jspb.Message.getFieldWithDefault(msg, 2, ""),
activeSegment: jspb.Message.getFieldWithDefault(msg, 3, 0),
activeSegmentLeader: jspb.Message.getFieldWithDefault(msg, 4, 0),
segmentsList: jspb.Message.toObjectList(msg.getSegmentsList(),
    proto.journal.engine.ClientSegmentMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetShardMetadataRespShard}
 */
proto.journal.engine.GetShardMetadataRespShard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetShardMetadataRespShard;
  return proto.journal.engine.GetShardMetadataRespShard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetShardMetadataRespShard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetShardMetadataRespShard}
 */
proto.journal.engine.GetShardMetadataRespShard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveSegment(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActiveSegmentLeader(value);
      break;
    case 5:
      var value = new proto.journal.engine.ClientSegmentMetadata;
      reader.readMessage(value,proto.journal.engine.ClientSegmentMetadata.deserializeBinaryFromReader);
      msg.addSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetShardMetadataRespShard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetShardMetadataRespShard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataRespShard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShard();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActiveSegment();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getActiveSegmentLeader();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.journal.engine.ClientSegmentMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.GetShardMetadataRespShard} returns this
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard = 2;
 * @return {string}
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.getShard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.GetShardMetadataRespShard} returns this
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.setShard = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 active_segment = 3;
 * @return {number}
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.getActiveSegment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.GetShardMetadataRespShard} returns this
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.setActiveSegment = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 active_segment_leader = 4;
 * @return {number}
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.getActiveSegmentLeader = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.GetShardMetadataRespShard} returns this
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.setActiveSegmentLeader = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated ClientSegmentMetadata segments = 5;
 * @return {!Array<!proto.journal.engine.ClientSegmentMetadata>}
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.getSegmentsList = function() {
  return /** @type{!Array<!proto.journal.engine.ClientSegmentMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.ClientSegmentMetadata, 5));
};


/**
 * @param {!Array<!proto.journal.engine.ClientSegmentMetadata>} value
 * @return {!proto.journal.engine.GetShardMetadataRespShard} returns this
*/
proto.journal.engine.GetShardMetadataRespShard.prototype.setSegmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.journal.engine.ClientSegmentMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.ClientSegmentMetadata}
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.addSegments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.journal.engine.ClientSegmentMetadata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.GetShardMetadataRespShard} returns this
 */
proto.journal.engine.GetShardMetadataRespShard.prototype.clearSegmentsList = function() {
  return this.setSegmentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.GetShardMetadataResp.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.GetShardMetadataResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.GetShardMetadataResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataResp.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.RespHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.GetShardMetadataRespBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.GetShardMetadataResp}
 */
proto.journal.engine.GetShardMetadataResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.GetShardMetadataResp;
  return proto.journal.engine.GetShardMetadataResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.GetShardMetadataResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.GetShardMetadataResp}
 */
proto.journal.engine.GetShardMetadataResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.RespHeader;
      reader.readMessage(value,proto.journal.engine.RespHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.GetShardMetadataRespBody;
      reader.readMessage(value,proto.journal.engine.GetShardMetadataRespBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.GetShardMetadataResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.GetShardMetadataResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.GetShardMetadataResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.GetShardMetadataResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.RespHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.GetShardMetadataRespBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional RespHeader header = 1;
 * @return {?proto.journal.engine.RespHeader}
 */
proto.journal.engine.GetShardMetadataResp.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.RespHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.RespHeader, 1));
};


/**
 * @param {?proto.journal.engine.RespHeader|undefined} value
 * @return {!proto.journal.engine.GetShardMetadataResp} returns this
*/
proto.journal.engine.GetShardMetadataResp.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.GetShardMetadataResp} returns this
 */
proto.journal.engine.GetShardMetadataResp.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.GetShardMetadataResp.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetShardMetadataRespBody body = 2;
 * @return {?proto.journal.engine.GetShardMetadataRespBody}
 */
proto.journal.engine.GetShardMetadataResp.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.GetShardMetadataRespBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.GetShardMetadataRespBody, 2));
};


/**
 * @param {?proto.journal.engine.GetShardMetadataRespBody|undefined} value
 * @return {!proto.journal.engine.GetShardMetadataResp} returns this
*/
proto.journal.engine.GetShardMetadataResp.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.GetShardMetadataResp} returns this
 */
proto.journal.engine.GetShardMetadataResp.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.GetShardMetadataResp.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.WriteReqBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.WriteReqBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.WriteReqBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.WriteReqBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteReqBody.toObject = function(includeInstance, msg) {
  var f, obj = {
dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.journal.engine.WriteReqSegmentMessages.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.WriteReqBody}
 */
proto.journal.engine.WriteReqBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.WriteReqBody;
  return proto.journal.engine.WriteReqBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.WriteReqBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.WriteReqBody}
 */
proto.journal.engine.WriteReqBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.WriteReqSegmentMessages;
      reader.readMessage(value,proto.journal.engine.WriteReqSegmentMessages.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.WriteReqBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.WriteReqBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.WriteReqBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteReqBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.journal.engine.WriteReqSegmentMessages.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WriteReqSegmentMessages data = 1;
 * @return {!Array<!proto.journal.engine.WriteReqSegmentMessages>}
 */
proto.journal.engine.WriteReqBody.prototype.getDataList = function() {
  return /** @type{!Array<!proto.journal.engine.WriteReqSegmentMessages>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.WriteReqSegmentMessages, 1));
};


/**
 * @param {!Array<!proto.journal.engine.WriteReqSegmentMessages>} value
 * @return {!proto.journal.engine.WriteReqBody} returns this
*/
proto.journal.engine.WriteReqBody.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.journal.engine.WriteReqSegmentMessages=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.WriteReqSegmentMessages}
 */
proto.journal.engine.WriteReqBody.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.journal.engine.WriteReqSegmentMessages, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.WriteReqBody} returns this
 */
proto.journal.engine.WriteReqBody.prototype.clearDataList = function() {
  return this.setDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.WriteReqSegmentMessages.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.WriteReqSegmentMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.WriteReqSegmentMessages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteReqSegmentMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shardName: jspb.Message.getFieldWithDefault(msg, 2, ""),
segment: jspb.Message.getFieldWithDefault(msg, 3, 0),
messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.journal.engine.WriteReqMessages.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.WriteReqSegmentMessages}
 */
proto.journal.engine.WriteReqSegmentMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.WriteReqSegmentMessages;
  return proto.journal.engine.WriteReqSegmentMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.WriteReqSegmentMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.WriteReqSegmentMessages}
 */
proto.journal.engine.WriteReqSegmentMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSegment(value);
      break;
    case 4:
      var value = new proto.journal.engine.WriteReqMessages;
      reader.readMessage(value,proto.journal.engine.WriteReqMessages.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.WriteReqSegmentMessages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.WriteReqSegmentMessages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteReqSegmentMessages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSegment();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.journal.engine.WriteReqMessages.serializeBinaryToWriter
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.WriteReqSegmentMessages} returns this
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard_name = 2;
 * @return {string}
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.getShardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.WriteReqSegmentMessages} returns this
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.setShardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 segment = 3;
 * @return {number}
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.getSegment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.WriteReqSegmentMessages} returns this
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.setSegment = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated WriteReqMessages messages = 4;
 * @return {!Array<!proto.journal.engine.WriteReqMessages>}
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.journal.engine.WriteReqMessages>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.WriteReqMessages, 4));
};


/**
 * @param {!Array<!proto.journal.engine.WriteReqMessages>} value
 * @return {!proto.journal.engine.WriteReqSegmentMessages} returns this
*/
proto.journal.engine.WriteReqSegmentMessages.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.journal.engine.WriteReqMessages=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.WriteReqMessages}
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.journal.engine.WriteReqMessages, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.WriteReqSegmentMessages} returns this
 */
proto.journal.engine.WriteReqSegmentMessages.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.WriteReqMessages.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.WriteReqMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.WriteReqMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.WriteReqMessages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteReqMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
pkid: jspb.Message.getFieldWithDefault(msg, 1, 0),
key: jspb.Message.getFieldWithDefault(msg, 2, ""),
value: msg.getValue_asB64(),
tagsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.WriteReqMessages}
 */
proto.journal.engine.WriteReqMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.WriteReqMessages;
  return proto.journal.engine.WriteReqMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.WriteReqMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.WriteReqMessages}
 */
proto.journal.engine.WriteReqMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPkid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.WriteReqMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.WriteReqMessages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.WriteReqMessages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteReqMessages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional uint64 pkid = 1;
 * @return {number}
 */
proto.journal.engine.WriteReqMessages.prototype.getPkid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.WriteReqMessages} returns this
 */
proto.journal.engine.WriteReqMessages.prototype.setPkid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.journal.engine.WriteReqMessages.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.WriteReqMessages} returns this
 */
proto.journal.engine.WriteReqMessages.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {string}
 */
proto.journal.engine.WriteReqMessages.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.journal.engine.WriteReqMessages.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.journal.engine.WriteReqMessages.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.journal.engine.WriteReqMessages} returns this
 */
proto.journal.engine.WriteReqMessages.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated string tags = 4;
 * @return {!Array<string>}
 */
proto.journal.engine.WriteReqMessages.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.journal.engine.WriteReqMessages} returns this
 */
proto.journal.engine.WriteReqMessages.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.WriteReqMessages} returns this
 */
proto.journal.engine.WriteReqMessages.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.WriteReqMessages} returns this
 */
proto.journal.engine.WriteReqMessages.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.WriteRespBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.WriteRespBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.WriteRespBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.WriteRespBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteRespBody.toObject = function(includeInstance, msg) {
  var f, obj = {
statusList: jspb.Message.toObjectList(msg.getStatusList(),
    proto.journal.engine.WriteRespMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.WriteRespBody}
 */
proto.journal.engine.WriteRespBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.WriteRespBody;
  return proto.journal.engine.WriteRespBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.WriteRespBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.WriteRespBody}
 */
proto.journal.engine.WriteRespBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.WriteRespMessage;
      reader.readMessage(value,proto.journal.engine.WriteRespMessage.deserializeBinaryFromReader);
      msg.addStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.WriteRespBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.WriteRespBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.WriteRespBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteRespBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.journal.engine.WriteRespMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WriteRespMessage status = 1;
 * @return {!Array<!proto.journal.engine.WriteRespMessage>}
 */
proto.journal.engine.WriteRespBody.prototype.getStatusList = function() {
  return /** @type{!Array<!proto.journal.engine.WriteRespMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.WriteRespMessage, 1));
};


/**
 * @param {!Array<!proto.journal.engine.WriteRespMessage>} value
 * @return {!proto.journal.engine.WriteRespBody} returns this
*/
proto.journal.engine.WriteRespBody.prototype.setStatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.journal.engine.WriteRespMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.WriteRespMessage}
 */
proto.journal.engine.WriteRespBody.prototype.addStatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.journal.engine.WriteRespMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.WriteRespBody} returns this
 */
proto.journal.engine.WriteRespBody.prototype.clearStatusList = function() {
  return this.setStatusList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.WriteRespMessage.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.WriteRespMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.WriteRespMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.WriteRespMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteRespMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shardName: jspb.Message.getFieldWithDefault(msg, 2, ""),
segment: jspb.Message.getFieldWithDefault(msg, 3, 0),
messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.journal.engine.WriteRespMessageStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.WriteRespMessage}
 */
proto.journal.engine.WriteRespMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.WriteRespMessage;
  return proto.journal.engine.WriteRespMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.WriteRespMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.WriteRespMessage}
 */
proto.journal.engine.WriteRespMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSegment(value);
      break;
    case 4:
      var value = new proto.journal.engine.WriteRespMessageStatus;
      reader.readMessage(value,proto.journal.engine.WriteRespMessageStatus.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.WriteRespMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.WriteRespMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.WriteRespMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteRespMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSegment();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.journal.engine.WriteRespMessageStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.WriteRespMessage.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.WriteRespMessage} returns this
 */
proto.journal.engine.WriteRespMessage.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard_name = 2;
 * @return {string}
 */
proto.journal.engine.WriteRespMessage.prototype.getShardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.WriteRespMessage} returns this
 */
proto.journal.engine.WriteRespMessage.prototype.setShardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 segment = 3;
 * @return {number}
 */
proto.journal.engine.WriteRespMessage.prototype.getSegment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.WriteRespMessage} returns this
 */
proto.journal.engine.WriteRespMessage.prototype.setSegment = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated WriteRespMessageStatus messages = 4;
 * @return {!Array<!proto.journal.engine.WriteRespMessageStatus>}
 */
proto.journal.engine.WriteRespMessage.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.journal.engine.WriteRespMessageStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.WriteRespMessageStatus, 4));
};


/**
 * @param {!Array<!proto.journal.engine.WriteRespMessageStatus>} value
 * @return {!proto.journal.engine.WriteRespMessage} returns this
*/
proto.journal.engine.WriteRespMessage.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.journal.engine.WriteRespMessageStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.WriteRespMessageStatus}
 */
proto.journal.engine.WriteRespMessage.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.journal.engine.WriteRespMessageStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.WriteRespMessage} returns this
 */
proto.journal.engine.WriteRespMessage.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.WriteRespMessageStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.WriteRespMessageStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.WriteRespMessageStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteRespMessageStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
pkid: jspb.Message.getFieldWithDefault(msg, 2, 0),
error: (f = msg.getError()) && proto.journal.engine.JournalEngineError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.WriteRespMessageStatus}
 */
proto.journal.engine.WriteRespMessageStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.WriteRespMessageStatus;
  return proto.journal.engine.WriteRespMessageStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.WriteRespMessageStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.WriteRespMessageStatus}
 */
proto.journal.engine.WriteRespMessageStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPkid(value);
      break;
    case 3:
      var value = new proto.journal.engine.JournalEngineError;
      reader.readMessage(value,proto.journal.engine.JournalEngineError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.WriteRespMessageStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.WriteRespMessageStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.WriteRespMessageStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteRespMessageStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPkid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.journal.engine.JournalEngineError.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 offset = 1;
 * @return {number}
 */
proto.journal.engine.WriteRespMessageStatus.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.WriteRespMessageStatus} returns this
 */
proto.journal.engine.WriteRespMessageStatus.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 pkid = 2;
 * @return {number}
 */
proto.journal.engine.WriteRespMessageStatus.prototype.getPkid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.WriteRespMessageStatus} returns this
 */
proto.journal.engine.WriteRespMessageStatus.prototype.setPkid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional JournalEngineError error = 3;
 * @return {?proto.journal.engine.JournalEngineError}
 */
proto.journal.engine.WriteRespMessageStatus.prototype.getError = function() {
  return /** @type{?proto.journal.engine.JournalEngineError} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.JournalEngineError, 3));
};


/**
 * @param {?proto.journal.engine.JournalEngineError|undefined} value
 * @return {!proto.journal.engine.WriteRespMessageStatus} returns this
*/
proto.journal.engine.WriteRespMessageStatus.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.WriteRespMessageStatus} returns this
 */
proto.journal.engine.WriteRespMessageStatus.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.WriteRespMessageStatus.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.WriteReq.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.WriteReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.WriteReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteReq.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.ReqHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.WriteReqBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.WriteReq}
 */
proto.journal.engine.WriteReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.WriteReq;
  return proto.journal.engine.WriteReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.WriteReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.WriteReq}
 */
proto.journal.engine.WriteReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.ReqHeader;
      reader.readMessage(value,proto.journal.engine.ReqHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.WriteReqBody;
      reader.readMessage(value,proto.journal.engine.WriteReqBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.WriteReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.WriteReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.WriteReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.ReqHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.WriteReqBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReqHeader header = 1;
 * @return {?proto.journal.engine.ReqHeader}
 */
proto.journal.engine.WriteReq.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.ReqHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReqHeader, 1));
};


/**
 * @param {?proto.journal.engine.ReqHeader|undefined} value
 * @return {!proto.journal.engine.WriteReq} returns this
*/
proto.journal.engine.WriteReq.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.WriteReq} returns this
 */
proto.journal.engine.WriteReq.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.WriteReq.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WriteReqBody body = 2;
 * @return {?proto.journal.engine.WriteReqBody}
 */
proto.journal.engine.WriteReq.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.WriteReqBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.WriteReqBody, 2));
};


/**
 * @param {?proto.journal.engine.WriteReqBody|undefined} value
 * @return {!proto.journal.engine.WriteReq} returns this
*/
proto.journal.engine.WriteReq.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.WriteReq} returns this
 */
proto.journal.engine.WriteReq.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.WriteReq.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.WriteResp.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.WriteResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.WriteResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteResp.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.RespHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.WriteRespBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.WriteResp}
 */
proto.journal.engine.WriteResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.WriteResp;
  return proto.journal.engine.WriteResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.WriteResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.WriteResp}
 */
proto.journal.engine.WriteResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.RespHeader;
      reader.readMessage(value,proto.journal.engine.RespHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.WriteRespBody;
      reader.readMessage(value,proto.journal.engine.WriteRespBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.WriteResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.WriteResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.WriteResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.WriteResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.RespHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.WriteRespBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional RespHeader header = 1;
 * @return {?proto.journal.engine.RespHeader}
 */
proto.journal.engine.WriteResp.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.RespHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.RespHeader, 1));
};


/**
 * @param {?proto.journal.engine.RespHeader|undefined} value
 * @return {!proto.journal.engine.WriteResp} returns this
*/
proto.journal.engine.WriteResp.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.WriteResp} returns this
 */
proto.journal.engine.WriteResp.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.WriteResp.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WriteRespBody body = 2;
 * @return {?proto.journal.engine.WriteRespBody}
 */
proto.journal.engine.WriteResp.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.WriteRespBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.WriteRespBody, 2));
};


/**
 * @param {?proto.journal.engine.WriteRespBody|undefined} value
 * @return {!proto.journal.engine.WriteResp} returns this
*/
proto.journal.engine.WriteResp.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.WriteResp} returns this
 */
proto.journal.engine.WriteResp.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.WriteResp.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.ReadReqBody.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReadReqBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReadReqBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReadReqBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReqBody.toObject = function(includeInstance, msg) {
  var f, obj = {
messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.journal.engine.ReadReqMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReadReqBody}
 */
proto.journal.engine.ReadReqBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReadReqBody;
  return proto.journal.engine.ReadReqBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReadReqBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReadReqBody}
 */
proto.journal.engine.ReadReqBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.journal.engine.ReadReqMessage;
      reader.readMessage(value,proto.journal.engine.ReadReqMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadReqBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReadReqBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReadReqBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReqBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.journal.engine.ReadReqMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReadReqMessage messages = 2;
 * @return {!Array<!proto.journal.engine.ReadReqMessage>}
 */
proto.journal.engine.ReadReqBody.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.journal.engine.ReadReqMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.ReadReqMessage, 2));
};


/**
 * @param {!Array<!proto.journal.engine.ReadReqMessage>} value
 * @return {!proto.journal.engine.ReadReqBody} returns this
*/
proto.journal.engine.ReadReqBody.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.journal.engine.ReadReqMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.ReadReqMessage}
 */
proto.journal.engine.ReadReqBody.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.journal.engine.ReadReqMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.ReadReqBody} returns this
 */
proto.journal.engine.ReadReqBody.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReadReqMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReadReqMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReadReqMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReqMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shardName: jspb.Message.getFieldWithDefault(msg, 2, ""),
segment: jspb.Message.getFieldWithDefault(msg, 3, 0),
readyType: jspb.Message.getFieldWithDefault(msg, 4, 0),
filter: (f = msg.getFilter()) && proto.journal.engine.ReadReqFilter.toObject(includeInstance, f),
options: (f = msg.getOptions()) && proto.journal.engine.ReadReqOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReadReqMessage}
 */
proto.journal.engine.ReadReqMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReadReqMessage;
  return proto.journal.engine.ReadReqMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReadReqMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReadReqMessage}
 */
proto.journal.engine.ReadReqMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSegment(value);
      break;
    case 4:
      var value = /** @type {!proto.journal.engine.ReadType} */ (reader.readEnum());
      msg.setReadyType(value);
      break;
    case 5:
      var value = new proto.journal.engine.ReadReqFilter;
      reader.readMessage(value,proto.journal.engine.ReadReqFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 6:
      var value = new proto.journal.engine.ReadReqOptions;
      reader.readMessage(value,proto.journal.engine.ReadReqOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadReqMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReadReqMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReadReqMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReqMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSegment();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getReadyType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.journal.engine.ReadReqFilter.serializeBinaryToWriter
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.journal.engine.ReadReqOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.ReadReqMessage.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.ReadReqMessage} returns this
 */
proto.journal.engine.ReadReqMessage.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard_name = 2;
 * @return {string}
 */
proto.journal.engine.ReadReqMessage.prototype.getShardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.ReadReqMessage} returns this
 */
proto.journal.engine.ReadReqMessage.prototype.setShardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 segment = 3;
 * @return {number}
 */
proto.journal.engine.ReadReqMessage.prototype.getSegment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ReadReqMessage} returns this
 */
proto.journal.engine.ReadReqMessage.prototype.setSegment = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ReadType ready_type = 4;
 * @return {!proto.journal.engine.ReadType}
 */
proto.journal.engine.ReadReqMessage.prototype.getReadyType = function() {
  return /** @type {!proto.journal.engine.ReadType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.journal.engine.ReadType} value
 * @return {!proto.journal.engine.ReadReqMessage} returns this
 */
proto.journal.engine.ReadReqMessage.prototype.setReadyType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ReadReqFilter filter = 5;
 * @return {?proto.journal.engine.ReadReqFilter}
 */
proto.journal.engine.ReadReqMessage.prototype.getFilter = function() {
  return /** @type{?proto.journal.engine.ReadReqFilter} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReadReqFilter, 5));
};


/**
 * @param {?proto.journal.engine.ReadReqFilter|undefined} value
 * @return {!proto.journal.engine.ReadReqMessage} returns this
*/
proto.journal.engine.ReadReqMessage.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.ReadReqMessage} returns this
 */
proto.journal.engine.ReadReqMessage.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.ReadReqMessage.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ReadReqOptions options = 6;
 * @return {?proto.journal.engine.ReadReqOptions}
 */
proto.journal.engine.ReadReqMessage.prototype.getOptions = function() {
  return /** @type{?proto.journal.engine.ReadReqOptions} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReadReqOptions, 6));
};


/**
 * @param {?proto.journal.engine.ReadReqOptions|undefined} value
 * @return {!proto.journal.engine.ReadReqMessage} returns this
*/
proto.journal.engine.ReadReqMessage.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.ReadReqMessage} returns this
 */
proto.journal.engine.ReadReqMessage.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.ReadReqMessage.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReadReqFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReadReqFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReadReqFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReqFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
key: jspb.Message.getFieldWithDefault(msg, 3, ""),
tag: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReadReqFilter}
 */
proto.journal.engine.ReadReqFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReadReqFilter;
  return proto.journal.engine.ReadReqFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReadReqFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReadReqFilter}
 */
proto.journal.engine.ReadReqFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadReqFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReadReqFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReadReqFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReqFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.journal.engine.ReadReqFilter.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ReadReqFilter} returns this
 */
proto.journal.engine.ReadReqFilter.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 offset = 2;
 * @return {number}
 */
proto.journal.engine.ReadReqFilter.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ReadReqFilter} returns this
 */
proto.journal.engine.ReadReqFilter.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.journal.engine.ReadReqFilter.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.ReadReqFilter} returns this
 */
proto.journal.engine.ReadReqFilter.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tag = 4;
 * @return {string}
 */
proto.journal.engine.ReadReqFilter.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.ReadReqFilter} returns this
 */
proto.journal.engine.ReadReqFilter.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReadReqOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReadReqOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReadReqOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReqOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
maxSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
maxRecord: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReadReqOptions}
 */
proto.journal.engine.ReadReqOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReadReqOptions;
  return proto.journal.engine.ReadReqOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReadReqOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReadReqOptions}
 */
proto.journal.engine.ReadReqOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadReqOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReadReqOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReadReqOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReqOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxSize();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMaxRecord();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 max_size = 1;
 * @return {number}
 */
proto.journal.engine.ReadReqOptions.prototype.getMaxSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ReadReqOptions} returns this
 */
proto.journal.engine.ReadReqOptions.prototype.setMaxSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 max_record = 2;
 * @return {number}
 */
proto.journal.engine.ReadReqOptions.prototype.getMaxRecord = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ReadReqOptions} returns this
 */
proto.journal.engine.ReadReqOptions.prototype.setMaxRecord = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.ReadRespBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReadRespBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReadRespBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReadRespBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadRespBody.toObject = function(includeInstance, msg) {
  var f, obj = {
messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.journal.engine.ReadRespSegmentMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReadRespBody}
 */
proto.journal.engine.ReadRespBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReadRespBody;
  return proto.journal.engine.ReadRespBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReadRespBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReadRespBody}
 */
proto.journal.engine.ReadRespBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.ReadRespSegmentMessage;
      reader.readMessage(value,proto.journal.engine.ReadRespSegmentMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadRespBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReadRespBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReadRespBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadRespBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.journal.engine.ReadRespSegmentMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReadRespSegmentMessage messages = 1;
 * @return {!Array<!proto.journal.engine.ReadRespSegmentMessage>}
 */
proto.journal.engine.ReadRespBody.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.journal.engine.ReadRespSegmentMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.ReadRespSegmentMessage, 1));
};


/**
 * @param {!Array<!proto.journal.engine.ReadRespSegmentMessage>} value
 * @return {!proto.journal.engine.ReadRespBody} returns this
*/
proto.journal.engine.ReadRespBody.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.journal.engine.ReadRespSegmentMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.ReadRespSegmentMessage}
 */
proto.journal.engine.ReadRespBody.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.journal.engine.ReadRespSegmentMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.ReadRespBody} returns this
 */
proto.journal.engine.ReadRespBody.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.ReadRespSegmentMessage.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReadRespSegmentMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReadRespSegmentMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadRespSegmentMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shardName: jspb.Message.getFieldWithDefault(msg, 2, ""),
segment: jspb.Message.getFieldWithDefault(msg, 3, 0),
messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.journal.engine.ReadRespMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReadRespSegmentMessage}
 */
proto.journal.engine.ReadRespSegmentMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReadRespSegmentMessage;
  return proto.journal.engine.ReadRespSegmentMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReadRespSegmentMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReadRespSegmentMessage}
 */
proto.journal.engine.ReadRespSegmentMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSegment(value);
      break;
    case 4:
      var value = new proto.journal.engine.ReadRespMessage;
      reader.readMessage(value,proto.journal.engine.ReadRespMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReadRespSegmentMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReadRespSegmentMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadRespSegmentMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSegment();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.journal.engine.ReadRespMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.ReadRespSegmentMessage} returns this
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard_name = 2;
 * @return {string}
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.getShardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.ReadRespSegmentMessage} returns this
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.setShardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 segment = 3;
 * @return {number}
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.getSegment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ReadRespSegmentMessage} returns this
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.setSegment = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated ReadRespMessage messages = 4;
 * @return {!Array<!proto.journal.engine.ReadRespMessage>}
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.journal.engine.ReadRespMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.ReadRespMessage, 4));
};


/**
 * @param {!Array<!proto.journal.engine.ReadRespMessage>} value
 * @return {!proto.journal.engine.ReadRespSegmentMessage} returns this
*/
proto.journal.engine.ReadRespSegmentMessage.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.journal.engine.ReadRespMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.ReadRespMessage}
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.journal.engine.ReadRespMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.ReadRespSegmentMessage} returns this
 */
proto.journal.engine.ReadRespSegmentMessage.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.ReadRespMessage.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReadRespMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReadRespMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReadRespMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadRespMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
key: jspb.Message.getFieldWithDefault(msg, 2, ""),
value: msg.getValue_asB64(),
tagsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReadRespMessage}
 */
proto.journal.engine.ReadRespMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReadRespMessage;
  return proto.journal.engine.ReadRespMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReadRespMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReadRespMessage}
 */
proto.journal.engine.ReadRespMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadRespMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReadRespMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReadRespMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadRespMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 offset = 1;
 * @return {number}
 */
proto.journal.engine.ReadRespMessage.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ReadRespMessage} returns this
 */
proto.journal.engine.ReadRespMessage.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.journal.engine.ReadRespMessage.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.ReadRespMessage} returns this
 */
proto.journal.engine.ReadRespMessage.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {string}
 */
proto.journal.engine.ReadRespMessage.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.journal.engine.ReadRespMessage.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadRespMessage.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.journal.engine.ReadRespMessage} returns this
 */
proto.journal.engine.ReadRespMessage.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated string tags = 4;
 * @return {!Array<string>}
 */
proto.journal.engine.ReadRespMessage.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.journal.engine.ReadRespMessage} returns this
 */
proto.journal.engine.ReadRespMessage.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.ReadRespMessage} returns this
 */
proto.journal.engine.ReadRespMessage.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.ReadRespMessage} returns this
 */
proto.journal.engine.ReadRespMessage.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.journal.engine.ReadRespMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.ReadRespMessage} returns this
 */
proto.journal.engine.ReadRespMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReadReq.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReadReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReadReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReq.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.ReqHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.ReadReqBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReadReq}
 */
proto.journal.engine.ReadReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReadReq;
  return proto.journal.engine.ReadReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReadReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReadReq}
 */
proto.journal.engine.ReadReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.ReqHeader;
      reader.readMessage(value,proto.journal.engine.ReqHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.ReadReqBody;
      reader.readMessage(value,proto.journal.engine.ReadReqBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReadReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReadReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.ReqHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.ReadReqBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReqHeader header = 1;
 * @return {?proto.journal.engine.ReqHeader}
 */
proto.journal.engine.ReadReq.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.ReqHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReqHeader, 1));
};


/**
 * @param {?proto.journal.engine.ReqHeader|undefined} value
 * @return {!proto.journal.engine.ReadReq} returns this
*/
proto.journal.engine.ReadReq.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.ReadReq} returns this
 */
proto.journal.engine.ReadReq.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.ReadReq.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReadReqBody body = 2;
 * @return {?proto.journal.engine.ReadReqBody}
 */
proto.journal.engine.ReadReq.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.ReadReqBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReadReqBody, 2));
};


/**
 * @param {?proto.journal.engine.ReadReqBody|undefined} value
 * @return {!proto.journal.engine.ReadReq} returns this
*/
proto.journal.engine.ReadReq.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.ReadReq} returns this
 */
proto.journal.engine.ReadReq.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.ReadReq.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.ReadResp.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.ReadResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.ReadResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadResp.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.RespHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.ReadRespBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.ReadResp}
 */
proto.journal.engine.ReadResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.ReadResp;
  return proto.journal.engine.ReadResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.ReadResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.ReadResp}
 */
proto.journal.engine.ReadResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.RespHeader;
      reader.readMessage(value,proto.journal.engine.RespHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.ReadRespBody;
      reader.readMessage(value,proto.journal.engine.ReadRespBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.ReadResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.ReadResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.ReadResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.ReadResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.RespHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.ReadRespBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional RespHeader header = 1;
 * @return {?proto.journal.engine.RespHeader}
 */
proto.journal.engine.ReadResp.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.RespHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.RespHeader, 1));
};


/**
 * @param {?proto.journal.engine.RespHeader|undefined} value
 * @return {!proto.journal.engine.ReadResp} returns this
*/
proto.journal.engine.ReadResp.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.ReadResp} returns this
 */
proto.journal.engine.ReadResp.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.ReadResp.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReadRespBody body = 2;
 * @return {?proto.journal.engine.ReadRespBody}
 */
proto.journal.engine.ReadResp.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.ReadRespBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReadRespBody, 2));
};


/**
 * @param {?proto.journal.engine.ReadRespBody|undefined} value
 * @return {!proto.journal.engine.ReadResp} returns this
*/
proto.journal.engine.ReadResp.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.ReadResp} returns this
 */
proto.journal.engine.ReadResp.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.ReadResp.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.FetchOffsetReqBody.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.FetchOffsetReqBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.FetchOffsetReqBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.FetchOffsetReqBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetReqBody.toObject = function(includeInstance, msg) {
  var f, obj = {
shardsList: jspb.Message.toObjectList(msg.getShardsList(),
    proto.journal.engine.FetchOffsetShard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.FetchOffsetReqBody}
 */
proto.journal.engine.FetchOffsetReqBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.FetchOffsetReqBody;
  return proto.journal.engine.FetchOffsetReqBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.FetchOffsetReqBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.FetchOffsetReqBody}
 */
proto.journal.engine.FetchOffsetReqBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.journal.engine.FetchOffsetShard;
      reader.readMessage(value,proto.journal.engine.FetchOffsetShard.deserializeBinaryFromReader);
      msg.addShards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.FetchOffsetReqBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.FetchOffsetReqBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.FetchOffsetReqBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetReqBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.journal.engine.FetchOffsetShard.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FetchOffsetShard shards = 2;
 * @return {!Array<!proto.journal.engine.FetchOffsetShard>}
 */
proto.journal.engine.FetchOffsetReqBody.prototype.getShardsList = function() {
  return /** @type{!Array<!proto.journal.engine.FetchOffsetShard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.FetchOffsetShard, 2));
};


/**
 * @param {!Array<!proto.journal.engine.FetchOffsetShard>} value
 * @return {!proto.journal.engine.FetchOffsetReqBody} returns this
*/
proto.journal.engine.FetchOffsetReqBody.prototype.setShardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.journal.engine.FetchOffsetShard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.FetchOffsetShard}
 */
proto.journal.engine.FetchOffsetReqBody.prototype.addShards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.journal.engine.FetchOffsetShard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.FetchOffsetReqBody} returns this
 */
proto.journal.engine.FetchOffsetReqBody.prototype.clearShardsList = function() {
  return this.setShardsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.FetchOffsetShard.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.FetchOffsetShard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.FetchOffsetShard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetShard.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shardName: jspb.Message.getFieldWithDefault(msg, 2, ""),
segmentNo: jspb.Message.getFieldWithDefault(msg, 3, 0),
timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.FetchOffsetShard}
 */
proto.journal.engine.FetchOffsetShard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.FetchOffsetShard;
  return proto.journal.engine.FetchOffsetShard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.FetchOffsetShard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.FetchOffsetShard}
 */
proto.journal.engine.FetchOffsetShard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSegmentNo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.FetchOffsetShard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.FetchOffsetShard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.FetchOffsetShard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetShard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSegmentNo();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.FetchOffsetShard.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.FetchOffsetShard} returns this
 */
proto.journal.engine.FetchOffsetShard.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard_name = 2;
 * @return {string}
 */
proto.journal.engine.FetchOffsetShard.prototype.getShardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.FetchOffsetShard} returns this
 */
proto.journal.engine.FetchOffsetShard.prototype.setShardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 segment_no = 3;
 * @return {number}
 */
proto.journal.engine.FetchOffsetShard.prototype.getSegmentNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.FetchOffsetShard} returns this
 */
proto.journal.engine.FetchOffsetShard.prototype.setSegmentNo = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.journal.engine.FetchOffsetShard.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.FetchOffsetShard} returns this
 */
proto.journal.engine.FetchOffsetShard.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.FetchOffsetReq.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.FetchOffsetReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.FetchOffsetReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetReq.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.ReqHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.FetchOffsetReqBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.FetchOffsetReq}
 */
proto.journal.engine.FetchOffsetReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.FetchOffsetReq;
  return proto.journal.engine.FetchOffsetReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.FetchOffsetReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.FetchOffsetReq}
 */
proto.journal.engine.FetchOffsetReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.ReqHeader;
      reader.readMessage(value,proto.journal.engine.ReqHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.FetchOffsetReqBody;
      reader.readMessage(value,proto.journal.engine.FetchOffsetReqBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.FetchOffsetReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.FetchOffsetReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.FetchOffsetReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.ReqHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.FetchOffsetReqBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReqHeader header = 1;
 * @return {?proto.journal.engine.ReqHeader}
 */
proto.journal.engine.FetchOffsetReq.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.ReqHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.ReqHeader, 1));
};


/**
 * @param {?proto.journal.engine.ReqHeader|undefined} value
 * @return {!proto.journal.engine.FetchOffsetReq} returns this
*/
proto.journal.engine.FetchOffsetReq.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.FetchOffsetReq} returns this
 */
proto.journal.engine.FetchOffsetReq.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.FetchOffsetReq.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FetchOffsetReqBody body = 2;
 * @return {?proto.journal.engine.FetchOffsetReqBody}
 */
proto.journal.engine.FetchOffsetReq.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.FetchOffsetReqBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.FetchOffsetReqBody, 2));
};


/**
 * @param {?proto.journal.engine.FetchOffsetReqBody|undefined} value
 * @return {!proto.journal.engine.FetchOffsetReq} returns this
*/
proto.journal.engine.FetchOffsetReq.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.FetchOffsetReq} returns this
 */
proto.journal.engine.FetchOffsetReq.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.FetchOffsetReq.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.journal.engine.FetchOffsetRespBody.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.FetchOffsetRespBody.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.FetchOffsetRespBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.FetchOffsetRespBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetRespBody.toObject = function(includeInstance, msg) {
  var f, obj = {
shardOffsetsList: jspb.Message.toObjectList(msg.getShardOffsetsList(),
    proto.journal.engine.FetchOffsetShardMeta.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.FetchOffsetRespBody}
 */
proto.journal.engine.FetchOffsetRespBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.FetchOffsetRespBody;
  return proto.journal.engine.FetchOffsetRespBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.FetchOffsetRespBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.FetchOffsetRespBody}
 */
proto.journal.engine.FetchOffsetRespBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.journal.engine.FetchOffsetShardMeta;
      reader.readMessage(value,proto.journal.engine.FetchOffsetShardMeta.deserializeBinaryFromReader);
      msg.addShardOffsets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.FetchOffsetRespBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.FetchOffsetRespBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.FetchOffsetRespBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetRespBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardOffsetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.journal.engine.FetchOffsetShardMeta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FetchOffsetShardMeta shard_offsets = 2;
 * @return {!Array<!proto.journal.engine.FetchOffsetShardMeta>}
 */
proto.journal.engine.FetchOffsetRespBody.prototype.getShardOffsetsList = function() {
  return /** @type{!Array<!proto.journal.engine.FetchOffsetShardMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.journal.engine.FetchOffsetShardMeta, 2));
};


/**
 * @param {!Array<!proto.journal.engine.FetchOffsetShardMeta>} value
 * @return {!proto.journal.engine.FetchOffsetRespBody} returns this
*/
proto.journal.engine.FetchOffsetRespBody.prototype.setShardOffsetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.journal.engine.FetchOffsetShardMeta=} opt_value
 * @param {number=} opt_index
 * @return {!proto.journal.engine.FetchOffsetShardMeta}
 */
proto.journal.engine.FetchOffsetRespBody.prototype.addShardOffsets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.journal.engine.FetchOffsetShardMeta, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.journal.engine.FetchOffsetRespBody} returns this
 */
proto.journal.engine.FetchOffsetRespBody.prototype.clearShardOffsetsList = function() {
  return this.setShardOffsetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.FetchOffsetShardMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.FetchOffsetShardMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetShardMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
shardName: jspb.Message.getFieldWithDefault(msg, 2, ""),
segmentNo: jspb.Message.getFieldWithDefault(msg, 3, 0),
offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
error: (f = msg.getError()) && proto.journal.engine.JournalEngineError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.FetchOffsetShardMeta}
 */
proto.journal.engine.FetchOffsetShardMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.FetchOffsetShardMeta;
  return proto.journal.engine.FetchOffsetShardMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.FetchOffsetShardMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.FetchOffsetShardMeta}
 */
proto.journal.engine.FetchOffsetShardMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSegmentNo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 5:
      var value = new proto.journal.engine.JournalEngineError;
      reader.readMessage(value,proto.journal.engine.JournalEngineError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.FetchOffsetShardMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.FetchOffsetShardMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetShardMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSegmentNo();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.journal.engine.JournalEngineError.serializeBinaryToWriter
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.FetchOffsetShardMeta} returns this
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shard_name = 2;
 * @return {string}
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.getShardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.journal.engine.FetchOffsetShardMeta} returns this
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.setShardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 segment_no = 3;
 * @return {number}
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.getSegmentNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.FetchOffsetShardMeta} returns this
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.setSegmentNo = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 offset = 4;
 * @return {number}
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.journal.engine.FetchOffsetShardMeta} returns this
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional JournalEngineError error = 5;
 * @return {?proto.journal.engine.JournalEngineError}
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.getError = function() {
  return /** @type{?proto.journal.engine.JournalEngineError} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.JournalEngineError, 5));
};


/**
 * @param {?proto.journal.engine.JournalEngineError|undefined} value
 * @return {!proto.journal.engine.FetchOffsetShardMeta} returns this
*/
proto.journal.engine.FetchOffsetShardMeta.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.FetchOffsetShardMeta} returns this
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.FetchOffsetShardMeta.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.journal.engine.FetchOffsetResp.prototype.toObject = function(opt_includeInstance) {
  return proto.journal.engine.FetchOffsetResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.journal.engine.FetchOffsetResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetResp.toObject = function(includeInstance, msg) {
  var f, obj = {
header: (f = msg.getHeader()) && proto.journal.engine.RespHeader.toObject(includeInstance, f),
body: (f = msg.getBody()) && proto.journal.engine.FetchOffsetRespBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.journal.engine.FetchOffsetResp}
 */
proto.journal.engine.FetchOffsetResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.journal.engine.FetchOffsetResp;
  return proto.journal.engine.FetchOffsetResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.journal.engine.FetchOffsetResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.journal.engine.FetchOffsetResp}
 */
proto.journal.engine.FetchOffsetResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.journal.engine.RespHeader;
      reader.readMessage(value,proto.journal.engine.RespHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.journal.engine.FetchOffsetRespBody;
      reader.readMessage(value,proto.journal.engine.FetchOffsetRespBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.journal.engine.FetchOffsetResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.journal.engine.FetchOffsetResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.journal.engine.FetchOffsetResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.journal.engine.FetchOffsetResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.journal.engine.RespHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.journal.engine.FetchOffsetRespBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional RespHeader header = 1;
 * @return {?proto.journal.engine.RespHeader}
 */
proto.journal.engine.FetchOffsetResp.prototype.getHeader = function() {
  return /** @type{?proto.journal.engine.RespHeader} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.RespHeader, 1));
};


/**
 * @param {?proto.journal.engine.RespHeader|undefined} value
 * @return {!proto.journal.engine.FetchOffsetResp} returns this
*/
proto.journal.engine.FetchOffsetResp.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.FetchOffsetResp} returns this
 */
proto.journal.engine.FetchOffsetResp.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.FetchOffsetResp.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FetchOffsetRespBody body = 2;
 * @return {?proto.journal.engine.FetchOffsetRespBody}
 */
proto.journal.engine.FetchOffsetResp.prototype.getBody = function() {
  return /** @type{?proto.journal.engine.FetchOffsetRespBody} */ (
    jspb.Message.getWrapperField(this, proto.journal.engine.FetchOffsetRespBody, 2));
};


/**
 * @param {?proto.journal.engine.FetchOffsetRespBody|undefined} value
 * @return {!proto.journal.engine.FetchOffsetResp} returns this
*/
proto.journal.engine.FetchOffsetResp.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.journal.engine.FetchOffsetResp} returns this
 */
proto.journal.engine.FetchOffsetResp.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.journal.engine.FetchOffsetResp.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.journal.engine.ApiKey = {
  UNIMPLEMENTED: 0,
  READ: 1,
  WRITE: 2,
  CREATESHARD: 3,
  DELETESHARD: 4,
  GETSHARDMETADATA: 5,
  GETCLUSTERMETADATA: 6,
  FETCHOFFSET: 7
};

/**
 * @enum {number}
 */
proto.journal.engine.ApiVersion = {
  V0: 0
};

/**
 * @enum {number}
 */
proto.journal.engine.ReadType = {
  OFFSET: 0,
  KEY: 1,
  TAG: 2
};

/**
 * @enum {number}
 */
proto.journal.engine.AutoOffsetStrategy = {
  EARLIEST: 0,
  LATEST: 1,
  NONE: 2
};

goog.object.extend(exports, proto.journal.engine);
