/**
 * @fileoverview gRPC-Web generated client stub for placement.center.mqtt
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: mqtt.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as mqtt_pb from './mqtt_pb'; // proto import: "mqtt.proto"


export class MqttServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorListUser = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ListUser',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ListUserRequest,
    mqtt_pb.ListUserReply,
    (request: mqtt_pb.ListUserRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ListUserReply.deserializeBinary
  );

  listUser(
    request: mqtt_pb.ListUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ListUserReply>;

  listUser(
    request: mqtt_pb.ListUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListUserReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ListUserReply>;

  listUser(
    request: mqtt_pb.ListUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ListUser',
        request,
        metadata || {},
        this.methodDescriptorListUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ListUser',
    request,
    metadata || {},
    this.methodDescriptorListUser);
  }

  methodDescriptorCreateUser = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/CreateUser',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.CreateUserRequest,
    mqtt_pb.CreateUserReply,
    (request: mqtt_pb.CreateUserRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.CreateUserReply.deserializeBinary
  );

  createUser(
    request: mqtt_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.CreateUserReply>;

  createUser(
    request: mqtt_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateUserReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.CreateUserReply>;

  createUser(
    request: mqtt_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/CreateUser',
        request,
        metadata || {},
        this.methodDescriptorCreateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/CreateUser',
    request,
    metadata || {},
    this.methodDescriptorCreateUser);
  }

  methodDescriptorDeleteUser = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/DeleteUser',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.DeleteUserRequest,
    mqtt_pb.DeleteUserReply,
    (request: mqtt_pb.DeleteUserRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.DeleteUserReply.deserializeBinary
  );

  deleteUser(
    request: mqtt_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.DeleteUserReply>;

  deleteUser(
    request: mqtt_pb.DeleteUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteUserReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.DeleteUserReply>;

  deleteUser(
    request: mqtt_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/DeleteUser',
        request,
        metadata || {},
        this.methodDescriptorDeleteUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/DeleteUser',
    request,
    metadata || {},
    this.methodDescriptorDeleteUser);
  }

  methodDescriptorListSession = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ListSession',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ListSessionRequest,
    mqtt_pb.ListSessionReply,
    (request: mqtt_pb.ListSessionRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ListSessionReply.deserializeBinary
  );

  listSession(
    request: mqtt_pb.ListSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ListSessionReply>;

  listSession(
    request: mqtt_pb.ListSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListSessionReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ListSessionReply>;

  listSession(
    request: mqtt_pb.ListSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListSessionReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ListSession',
        request,
        metadata || {},
        this.methodDescriptorListSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ListSession',
    request,
    metadata || {},
    this.methodDescriptorListSession);
  }

  methodDescriptorCreateSession = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/CreateSession',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.CreateSessionRequest,
    mqtt_pb.CreateSessionReply,
    (request: mqtt_pb.CreateSessionRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.CreateSessionReply.deserializeBinary
  );

  createSession(
    request: mqtt_pb.CreateSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.CreateSessionReply>;

  createSession(
    request: mqtt_pb.CreateSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateSessionReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.CreateSessionReply>;

  createSession(
    request: mqtt_pb.CreateSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateSessionReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/CreateSession',
        request,
        metadata || {},
        this.methodDescriptorCreateSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/CreateSession',
    request,
    metadata || {},
    this.methodDescriptorCreateSession);
  }

  methodDescriptorUpdateSession = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/UpdateSession',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.UpdateSessionRequest,
    mqtt_pb.UpdateSessionReply,
    (request: mqtt_pb.UpdateSessionRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.UpdateSessionReply.deserializeBinary
  );

  updateSession(
    request: mqtt_pb.UpdateSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.UpdateSessionReply>;

  updateSession(
    request: mqtt_pb.UpdateSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.UpdateSessionReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.UpdateSessionReply>;

  updateSession(
    request: mqtt_pb.UpdateSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.UpdateSessionReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/UpdateSession',
        request,
        metadata || {},
        this.methodDescriptorUpdateSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/UpdateSession',
    request,
    metadata || {},
    this.methodDescriptorUpdateSession);
  }

  methodDescriptorDeleteSession = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/DeleteSession',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.DeleteSessionRequest,
    mqtt_pb.DeleteSessionReply,
    (request: mqtt_pb.DeleteSessionRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.DeleteSessionReply.deserializeBinary
  );

  deleteSession(
    request: mqtt_pb.DeleteSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.DeleteSessionReply>;

  deleteSession(
    request: mqtt_pb.DeleteSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteSessionReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.DeleteSessionReply>;

  deleteSession(
    request: mqtt_pb.DeleteSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteSessionReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/DeleteSession',
        request,
        metadata || {},
        this.methodDescriptorDeleteSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/DeleteSession',
    request,
    metadata || {},
    this.methodDescriptorDeleteSession);
  }

  methodDescriptorListTopic = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ListTopic',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ListTopicRequest,
    mqtt_pb.ListTopicReply,
    (request: mqtt_pb.ListTopicRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ListTopicReply.deserializeBinary
  );

  listTopic(
    request: mqtt_pb.ListTopicRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ListTopicReply>;

  listTopic(
    request: mqtt_pb.ListTopicRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListTopicReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ListTopicReply>;

  listTopic(
    request: mqtt_pb.ListTopicRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListTopicReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ListTopic',
        request,
        metadata || {},
        this.methodDescriptorListTopic,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ListTopic',
    request,
    metadata || {},
    this.methodDescriptorListTopic);
  }

  methodDescriptorCreateTopic = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/CreateTopic',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.CreateTopicRequest,
    mqtt_pb.CreateTopicReply,
    (request: mqtt_pb.CreateTopicRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.CreateTopicReply.deserializeBinary
  );

  createTopic(
    request: mqtt_pb.CreateTopicRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.CreateTopicReply>;

  createTopic(
    request: mqtt_pb.CreateTopicRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateTopicReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.CreateTopicReply>;

  createTopic(
    request: mqtt_pb.CreateTopicRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateTopicReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/CreateTopic',
        request,
        metadata || {},
        this.methodDescriptorCreateTopic,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/CreateTopic',
    request,
    metadata || {},
    this.methodDescriptorCreateTopic);
  }

  methodDescriptorDeleteTopic = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/DeleteTopic',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.DeleteTopicRequest,
    mqtt_pb.DeleteTopicReply,
    (request: mqtt_pb.DeleteTopicRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.DeleteTopicReply.deserializeBinary
  );

  deleteTopic(
    request: mqtt_pb.DeleteTopicRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.DeleteTopicReply>;

  deleteTopic(
    request: mqtt_pb.DeleteTopicRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteTopicReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.DeleteTopicReply>;

  deleteTopic(
    request: mqtt_pb.DeleteTopicRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteTopicReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/DeleteTopic',
        request,
        metadata || {},
        this.methodDescriptorDeleteTopic,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/DeleteTopic',
    request,
    metadata || {},
    this.methodDescriptorDeleteTopic);
  }

  methodDescriptorSetTopicRetainMessage = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/SetTopicRetainMessage',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.SetTopicRetainMessageRequest,
    mqtt_pb.SetTopicRetainMessageReply,
    (request: mqtt_pb.SetTopicRetainMessageRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.SetTopicRetainMessageReply.deserializeBinary
  );

  setTopicRetainMessage(
    request: mqtt_pb.SetTopicRetainMessageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.SetTopicRetainMessageReply>;

  setTopicRetainMessage(
    request: mqtt_pb.SetTopicRetainMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.SetTopicRetainMessageReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.SetTopicRetainMessageReply>;

  setTopicRetainMessage(
    request: mqtt_pb.SetTopicRetainMessageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.SetTopicRetainMessageReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/SetTopicRetainMessage',
        request,
        metadata || {},
        this.methodDescriptorSetTopicRetainMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/SetTopicRetainMessage',
    request,
    metadata || {},
    this.methodDescriptorSetTopicRetainMessage);
  }

  methodDescriptorGetShareSubLeader = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/GetShareSubLeader',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.GetShareSubLeaderRequest,
    mqtt_pb.GetShareSubLeaderReply,
    (request: mqtt_pb.GetShareSubLeaderRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.GetShareSubLeaderReply.deserializeBinary
  );

  getShareSubLeader(
    request: mqtt_pb.GetShareSubLeaderRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.GetShareSubLeaderReply>;

  getShareSubLeader(
    request: mqtt_pb.GetShareSubLeaderRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.GetShareSubLeaderReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.GetShareSubLeaderReply>;

  getShareSubLeader(
    request: mqtt_pb.GetShareSubLeaderRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.GetShareSubLeaderReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/GetShareSubLeader',
        request,
        metadata || {},
        this.methodDescriptorGetShareSubLeader,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/GetShareSubLeader',
    request,
    metadata || {},
    this.methodDescriptorGetShareSubLeader);
  }

  methodDescriptorSaveLastWillMessage = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/SaveLastWillMessage',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.SaveLastWillMessageRequest,
    mqtt_pb.SaveLastWillMessageReply,
    (request: mqtt_pb.SaveLastWillMessageRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.SaveLastWillMessageReply.deserializeBinary
  );

  saveLastWillMessage(
    request: mqtt_pb.SaveLastWillMessageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.SaveLastWillMessageReply>;

  saveLastWillMessage(
    request: mqtt_pb.SaveLastWillMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.SaveLastWillMessageReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.SaveLastWillMessageReply>;

  saveLastWillMessage(
    request: mqtt_pb.SaveLastWillMessageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.SaveLastWillMessageReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/SaveLastWillMessage',
        request,
        metadata || {},
        this.methodDescriptorSaveLastWillMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/SaveLastWillMessage',
    request,
    metadata || {},
    this.methodDescriptorSaveLastWillMessage);
  }

  methodDescriptorListAcl = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ListAcl',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ListAclRequest,
    mqtt_pb.ListAclReply,
    (request: mqtt_pb.ListAclRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ListAclReply.deserializeBinary
  );

  listAcl(
    request: mqtt_pb.ListAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ListAclReply>;

  listAcl(
    request: mqtt_pb.ListAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListAclReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ListAclReply>;

  listAcl(
    request: mqtt_pb.ListAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListAclReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ListAcl',
        request,
        metadata || {},
        this.methodDescriptorListAcl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ListAcl',
    request,
    metadata || {},
    this.methodDescriptorListAcl);
  }

  methodDescriptorDeleteAcl = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/DeleteAcl',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.DeleteAclRequest,
    mqtt_pb.DeleteAclReply,
    (request: mqtt_pb.DeleteAclRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.DeleteAclReply.deserializeBinary
  );

  deleteAcl(
    request: mqtt_pb.DeleteAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.DeleteAclReply>;

  deleteAcl(
    request: mqtt_pb.DeleteAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteAclReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.DeleteAclReply>;

  deleteAcl(
    request: mqtt_pb.DeleteAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteAclReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/DeleteAcl',
        request,
        metadata || {},
        this.methodDescriptorDeleteAcl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/DeleteAcl',
    request,
    metadata || {},
    this.methodDescriptorDeleteAcl);
  }

  methodDescriptorCreateAcl = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/CreateAcl',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.CreateAclRequest,
    mqtt_pb.CreateAclReply,
    (request: mqtt_pb.CreateAclRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.CreateAclReply.deserializeBinary
  );

  createAcl(
    request: mqtt_pb.CreateAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.CreateAclReply>;

  createAcl(
    request: mqtt_pb.CreateAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateAclReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.CreateAclReply>;

  createAcl(
    request: mqtt_pb.CreateAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateAclReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/CreateAcl',
        request,
        metadata || {},
        this.methodDescriptorCreateAcl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/CreateAcl',
    request,
    metadata || {},
    this.methodDescriptorCreateAcl);
  }

  methodDescriptorListBlacklist = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ListBlacklist',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ListBlacklistRequest,
    mqtt_pb.ListBlacklistReply,
    (request: mqtt_pb.ListBlacklistRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ListBlacklistReply.deserializeBinary
  );

  listBlacklist(
    request: mqtt_pb.ListBlacklistRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ListBlacklistReply>;

  listBlacklist(
    request: mqtt_pb.ListBlacklistRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListBlacklistReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ListBlacklistReply>;

  listBlacklist(
    request: mqtt_pb.ListBlacklistRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListBlacklistReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ListBlacklist',
        request,
        metadata || {},
        this.methodDescriptorListBlacklist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ListBlacklist',
    request,
    metadata || {},
    this.methodDescriptorListBlacklist);
  }

  methodDescriptorDeleteBlacklist = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/DeleteBlacklist',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.DeleteBlacklistRequest,
    mqtt_pb.DeleteBlacklistReply,
    (request: mqtt_pb.DeleteBlacklistRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.DeleteBlacklistReply.deserializeBinary
  );

  deleteBlacklist(
    request: mqtt_pb.DeleteBlacklistRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.DeleteBlacklistReply>;

  deleteBlacklist(
    request: mqtt_pb.DeleteBlacklistRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteBlacklistReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.DeleteBlacklistReply>;

  deleteBlacklist(
    request: mqtt_pb.DeleteBlacklistRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteBlacklistReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/DeleteBlacklist',
        request,
        metadata || {},
        this.methodDescriptorDeleteBlacklist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/DeleteBlacklist',
    request,
    metadata || {},
    this.methodDescriptorDeleteBlacklist);
  }

  methodDescriptorCreateBlacklist = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/CreateBlacklist',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.CreateBlacklistRequest,
    mqtt_pb.CreateBlacklistReply,
    (request: mqtt_pb.CreateBlacklistRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.CreateBlacklistReply.deserializeBinary
  );

  createBlacklist(
    request: mqtt_pb.CreateBlacklistRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.CreateBlacklistReply>;

  createBlacklist(
    request: mqtt_pb.CreateBlacklistRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateBlacklistReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.CreateBlacklistReply>;

  createBlacklist(
    request: mqtt_pb.CreateBlacklistRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateBlacklistReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/CreateBlacklist',
        request,
        metadata || {},
        this.methodDescriptorCreateBlacklist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/CreateBlacklist',
    request,
    metadata || {},
    this.methodDescriptorCreateBlacklist);
  }

  methodDescriptorCreateTopicRewriteRule = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/CreateTopicRewriteRule',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.CreateTopicRewriteRuleRequest,
    mqtt_pb.CreateTopicRewriteRuleReply,
    (request: mqtt_pb.CreateTopicRewriteRuleRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.CreateTopicRewriteRuleReply.deserializeBinary
  );

  createTopicRewriteRule(
    request: mqtt_pb.CreateTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.CreateTopicRewriteRuleReply>;

  createTopicRewriteRule(
    request: mqtt_pb.CreateTopicRewriteRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateTopicRewriteRuleReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.CreateTopicRewriteRuleReply>;

  createTopicRewriteRule(
    request: mqtt_pb.CreateTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateTopicRewriteRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/CreateTopicRewriteRule',
        request,
        metadata || {},
        this.methodDescriptorCreateTopicRewriteRule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/CreateTopicRewriteRule',
    request,
    metadata || {},
    this.methodDescriptorCreateTopicRewriteRule);
  }

  methodDescriptorDeleteTopicRewriteRule = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/DeleteTopicRewriteRule',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.DeleteTopicRewriteRuleRequest,
    mqtt_pb.DeleteTopicRewriteRuleReply,
    (request: mqtt_pb.DeleteTopicRewriteRuleRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.DeleteTopicRewriteRuleReply.deserializeBinary
  );

  deleteTopicRewriteRule(
    request: mqtt_pb.DeleteTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.DeleteTopicRewriteRuleReply>;

  deleteTopicRewriteRule(
    request: mqtt_pb.DeleteTopicRewriteRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteTopicRewriteRuleReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.DeleteTopicRewriteRuleReply>;

  deleteTopicRewriteRule(
    request: mqtt_pb.DeleteTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteTopicRewriteRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/DeleteTopicRewriteRule',
        request,
        metadata || {},
        this.methodDescriptorDeleteTopicRewriteRule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/DeleteTopicRewriteRule',
    request,
    metadata || {},
    this.methodDescriptorDeleteTopicRewriteRule);
  }

  methodDescriptorListTopicRewriteRule = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ListTopicRewriteRule',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ListTopicRewriteRuleRequest,
    mqtt_pb.ListTopicRewriteRuleReply,
    (request: mqtt_pb.ListTopicRewriteRuleRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ListTopicRewriteRuleReply.deserializeBinary
  );

  listTopicRewriteRule(
    request: mqtt_pb.ListTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ListTopicRewriteRuleReply>;

  listTopicRewriteRule(
    request: mqtt_pb.ListTopicRewriteRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListTopicRewriteRuleReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ListTopicRewriteRuleReply>;

  listTopicRewriteRule(
    request: mqtt_pb.ListTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListTopicRewriteRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ListTopicRewriteRule',
        request,
        metadata || {},
        this.methodDescriptorListTopicRewriteRule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ListTopicRewriteRule',
    request,
    metadata || {},
    this.methodDescriptorListTopicRewriteRule);
  }

  methodDescriptorListSubscribe = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ListSubscribe',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ListSubscribeRequest,
    mqtt_pb.ListSubscribeReply,
    (request: mqtt_pb.ListSubscribeRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ListSubscribeReply.deserializeBinary
  );

  listSubscribe(
    request: mqtt_pb.ListSubscribeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ListSubscribeReply>;

  listSubscribe(
    request: mqtt_pb.ListSubscribeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListSubscribeReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ListSubscribeReply>;

  listSubscribe(
    request: mqtt_pb.ListSubscribeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListSubscribeReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ListSubscribe',
        request,
        metadata || {},
        this.methodDescriptorListSubscribe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ListSubscribe',
    request,
    metadata || {},
    this.methodDescriptorListSubscribe);
  }

  methodDescriptorSetSubscribe = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/SetSubscribe',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.SetSubscribeRequest,
    mqtt_pb.SetSubscribeReply,
    (request: mqtt_pb.SetSubscribeRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.SetSubscribeReply.deserializeBinary
  );

  setSubscribe(
    request: mqtt_pb.SetSubscribeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.SetSubscribeReply>;

  setSubscribe(
    request: mqtt_pb.SetSubscribeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.SetSubscribeReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.SetSubscribeReply>;

  setSubscribe(
    request: mqtt_pb.SetSubscribeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.SetSubscribeReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/SetSubscribe',
        request,
        metadata || {},
        this.methodDescriptorSetSubscribe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/SetSubscribe',
    request,
    metadata || {},
    this.methodDescriptorSetSubscribe);
  }

  methodDescriptorDeleteSubscribe = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/DeleteSubscribe',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.DeleteSubscribeRequest,
    mqtt_pb.DeleteSubscribeReply,
    (request: mqtt_pb.DeleteSubscribeRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.DeleteSubscribeReply.deserializeBinary
  );

  deleteSubscribe(
    request: mqtt_pb.DeleteSubscribeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.DeleteSubscribeReply>;

  deleteSubscribe(
    request: mqtt_pb.DeleteSubscribeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteSubscribeReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.DeleteSubscribeReply>;

  deleteSubscribe(
    request: mqtt_pb.DeleteSubscribeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteSubscribeReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/DeleteSubscribe',
        request,
        metadata || {},
        this.methodDescriptorDeleteSubscribe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/DeleteSubscribe',
    request,
    metadata || {},
    this.methodDescriptorDeleteSubscribe);
  }

  methodDescriptorListConnectors = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ListConnectors',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ListConnectorRequest,
    mqtt_pb.ListConnectorReply,
    (request: mqtt_pb.ListConnectorRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ListConnectorReply.deserializeBinary
  );

  listConnectors(
    request: mqtt_pb.ListConnectorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ListConnectorReply>;

  listConnectors(
    request: mqtt_pb.ListConnectorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListConnectorReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ListConnectorReply>;

  listConnectors(
    request: mqtt_pb.ListConnectorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListConnectorReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ListConnectors',
        request,
        metadata || {},
        this.methodDescriptorListConnectors,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ListConnectors',
    request,
    metadata || {},
    this.methodDescriptorListConnectors);
  }

  methodDescriptorCreateConnector = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/CreateConnector',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.CreateConnectorRequest,
    mqtt_pb.CreateConnectorReply,
    (request: mqtt_pb.CreateConnectorRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.CreateConnectorReply.deserializeBinary
  );

  createConnector(
    request: mqtt_pb.CreateConnectorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.CreateConnectorReply>;

  createConnector(
    request: mqtt_pb.CreateConnectorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateConnectorReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.CreateConnectorReply>;

  createConnector(
    request: mqtt_pb.CreateConnectorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.CreateConnectorReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/CreateConnector',
        request,
        metadata || {},
        this.methodDescriptorCreateConnector,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/CreateConnector',
    request,
    metadata || {},
    this.methodDescriptorCreateConnector);
  }

  methodDescriptorUpdateConnector = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/UpdateConnector',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.UpdateConnectorRequest,
    mqtt_pb.UpdateConnectorReply,
    (request: mqtt_pb.UpdateConnectorRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.UpdateConnectorReply.deserializeBinary
  );

  updateConnector(
    request: mqtt_pb.UpdateConnectorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.UpdateConnectorReply>;

  updateConnector(
    request: mqtt_pb.UpdateConnectorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.UpdateConnectorReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.UpdateConnectorReply>;

  updateConnector(
    request: mqtt_pb.UpdateConnectorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.UpdateConnectorReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/UpdateConnector',
        request,
        metadata || {},
        this.methodDescriptorUpdateConnector,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/UpdateConnector',
    request,
    metadata || {},
    this.methodDescriptorUpdateConnector);
  }

  methodDescriptorDeleteConnector = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/DeleteConnector',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.DeleteConnectorRequest,
    mqtt_pb.DeleteConnectorReply,
    (request: mqtt_pb.DeleteConnectorRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.DeleteConnectorReply.deserializeBinary
  );

  deleteConnector(
    request: mqtt_pb.DeleteConnectorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.DeleteConnectorReply>;

  deleteConnector(
    request: mqtt_pb.DeleteConnectorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteConnectorReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.DeleteConnectorReply>;

  deleteConnector(
    request: mqtt_pb.DeleteConnectorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteConnectorReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/DeleteConnector',
        request,
        metadata || {},
        this.methodDescriptorDeleteConnector,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/DeleteConnector',
    request,
    metadata || {},
    this.methodDescriptorDeleteConnector);
  }

  methodDescriptorConnectorHeartbeat = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ConnectorHeartbeat',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ConnectorHeartbeatRequest,
    mqtt_pb.ConnectorHeartbeatReply,
    (request: mqtt_pb.ConnectorHeartbeatRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ConnectorHeartbeatReply.deserializeBinary
  );

  connectorHeartbeat(
    request: mqtt_pb.ConnectorHeartbeatRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ConnectorHeartbeatReply>;

  connectorHeartbeat(
    request: mqtt_pb.ConnectorHeartbeatRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ConnectorHeartbeatReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ConnectorHeartbeatReply>;

  connectorHeartbeat(
    request: mqtt_pb.ConnectorHeartbeatRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ConnectorHeartbeatReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ConnectorHeartbeat',
        request,
        metadata || {},
        this.methodDescriptorConnectorHeartbeat,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ConnectorHeartbeat',
    request,
    metadata || {},
    this.methodDescriptorConnectorHeartbeat);
  }

  methodDescriptorSetAutoSubscribeRule = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/SetAutoSubscribeRule',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.SetAutoSubscribeRuleRequest,
    mqtt_pb.SetAutoSubscribeRuleReply,
    (request: mqtt_pb.SetAutoSubscribeRuleRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.SetAutoSubscribeRuleReply.deserializeBinary
  );

  setAutoSubscribeRule(
    request: mqtt_pb.SetAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.SetAutoSubscribeRuleReply>;

  setAutoSubscribeRule(
    request: mqtt_pb.SetAutoSubscribeRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.SetAutoSubscribeRuleReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.SetAutoSubscribeRuleReply>;

  setAutoSubscribeRule(
    request: mqtt_pb.SetAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.SetAutoSubscribeRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/SetAutoSubscribeRule',
        request,
        metadata || {},
        this.methodDescriptorSetAutoSubscribeRule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/SetAutoSubscribeRule',
    request,
    metadata || {},
    this.methodDescriptorSetAutoSubscribeRule);
  }

  methodDescriptorDeleteAutoSubscribeRule = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/DeleteAutoSubscribeRule',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.DeleteAutoSubscribeRuleRequest,
    mqtt_pb.DeleteAutoSubscribeRuleReply,
    (request: mqtt_pb.DeleteAutoSubscribeRuleRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.DeleteAutoSubscribeRuleReply.deserializeBinary
  );

  deleteAutoSubscribeRule(
    request: mqtt_pb.DeleteAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.DeleteAutoSubscribeRuleReply>;

  deleteAutoSubscribeRule(
    request: mqtt_pb.DeleteAutoSubscribeRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteAutoSubscribeRuleReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.DeleteAutoSubscribeRuleReply>;

  deleteAutoSubscribeRule(
    request: mqtt_pb.DeleteAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.DeleteAutoSubscribeRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/DeleteAutoSubscribeRule',
        request,
        metadata || {},
        this.methodDescriptorDeleteAutoSubscribeRule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/DeleteAutoSubscribeRule',
    request,
    metadata || {},
    this.methodDescriptorDeleteAutoSubscribeRule);
  }

  methodDescriptorListAutoSubscribeRule = new grpcWeb.MethodDescriptor(
    '/placement.center.mqtt.MqttService/ListAutoSubscribeRule',
    grpcWeb.MethodType.UNARY,
    mqtt_pb.ListAutoSubscribeRuleRequest,
    mqtt_pb.ListAutoSubscribeRuleReply,
    (request: mqtt_pb.ListAutoSubscribeRuleRequest) => {
      return request.serializeBinary();
    },
    mqtt_pb.ListAutoSubscribeRuleReply.deserializeBinary
  );

  listAutoSubscribeRule(
    request: mqtt_pb.ListAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<mqtt_pb.ListAutoSubscribeRuleReply>;

  listAutoSubscribeRule(
    request: mqtt_pb.ListAutoSubscribeRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListAutoSubscribeRuleReply) => void): grpcWeb.ClientReadableStream<mqtt_pb.ListAutoSubscribeRuleReply>;

  listAutoSubscribeRule(
    request: mqtt_pb.ListAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: mqtt_pb.ListAutoSubscribeRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.mqtt.MqttService/ListAutoSubscribeRule',
        request,
        metadata || {},
        this.methodDescriptorListAutoSubscribeRule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.mqtt.MqttService/ListAutoSubscribeRule',
    request,
    metadata || {},
    this.methodDescriptorListAutoSubscribeRule);
  }

}

