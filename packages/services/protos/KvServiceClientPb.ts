/**
 * @fileoverview gRPC-Web generated client stub for placement.center.kv
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: kv.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as kv_pb from './kv_pb'; // proto import: "kv.proto"


export class KvServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorset = new grpcWeb.MethodDescriptor(
    '/placement.center.kv.KvService/set',
    grpcWeb.MethodType.UNARY,
    kv_pb.SetRequest,
    kv_pb.SetReply,
    (request: kv_pb.SetRequest) => {
      return request.serializeBinary();
    },
    kv_pb.SetReply.deserializeBinary
  );

  set(
    request: kv_pb.SetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<kv_pb.SetReply>;

  set(
    request: kv_pb.SetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kv_pb.SetReply) => void): grpcWeb.ClientReadableStream<kv_pb.SetReply>;

  set(
    request: kv_pb.SetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kv_pb.SetReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.kv.KvService/set',
        request,
        metadata || {},
        this.methodDescriptorset,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.kv.KvService/set',
    request,
    metadata || {},
    this.methodDescriptorset);
  }

  methodDescriptordelete = new grpcWeb.MethodDescriptor(
    '/placement.center.kv.KvService/delete',
    grpcWeb.MethodType.UNARY,
    kv_pb.DeleteRequest,
    kv_pb.DeleteReply,
    (request: kv_pb.DeleteRequest) => {
      return request.serializeBinary();
    },
    kv_pb.DeleteReply.deserializeBinary
  );

  delete(
    request: kv_pb.DeleteRequest,
    metadata?: grpcWeb.Metadata | null): Promise<kv_pb.DeleteReply>;

  delete(
    request: kv_pb.DeleteRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kv_pb.DeleteReply) => void): grpcWeb.ClientReadableStream<kv_pb.DeleteReply>;

  delete(
    request: kv_pb.DeleteRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kv_pb.DeleteReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.kv.KvService/delete',
        request,
        metadata || {},
        this.methodDescriptordelete,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.kv.KvService/delete',
    request,
    metadata || {},
    this.methodDescriptordelete);
  }

  methodDescriptorget = new grpcWeb.MethodDescriptor(
    '/placement.center.kv.KvService/get',
    grpcWeb.MethodType.UNARY,
    kv_pb.GetRequest,
    kv_pb.GetReply,
    (request: kv_pb.GetRequest) => {
      return request.serializeBinary();
    },
    kv_pb.GetReply.deserializeBinary
  );

  get(
    request: kv_pb.GetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<kv_pb.GetReply>;

  get(
    request: kv_pb.GetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kv_pb.GetReply) => void): grpcWeb.ClientReadableStream<kv_pb.GetReply>;

  get(
    request: kv_pb.GetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kv_pb.GetReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.kv.KvService/get',
        request,
        metadata || {},
        this.methodDescriptorget,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.kv.KvService/get',
    request,
    metadata || {},
    this.methodDescriptorget);
  }

  methodDescriptorexists = new grpcWeb.MethodDescriptor(
    '/placement.center.kv.KvService/exists',
    grpcWeb.MethodType.UNARY,
    kv_pb.ExistsRequest,
    kv_pb.ExistsReply,
    (request: kv_pb.ExistsRequest) => {
      return request.serializeBinary();
    },
    kv_pb.ExistsReply.deserializeBinary
  );

  exists(
    request: kv_pb.ExistsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<kv_pb.ExistsReply>;

  exists(
    request: kv_pb.ExistsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kv_pb.ExistsReply) => void): grpcWeb.ClientReadableStream<kv_pb.ExistsReply>;

  exists(
    request: kv_pb.ExistsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kv_pb.ExistsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.kv.KvService/exists',
        request,
        metadata || {},
        this.methodDescriptorexists,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.kv.KvService/exists',
    request,
    metadata || {},
    this.methodDescriptorexists);
  }

  methodDescriptorlist_shard = new grpcWeb.MethodDescriptor(
    '/placement.center.kv.KvService/list_shard',
    grpcWeb.MethodType.UNARY,
    kv_pb.ListShardRequest,
    kv_pb.ListShardReply,
    (request: kv_pb.ListShardRequest) => {
      return request.serializeBinary();
    },
    kv_pb.ListShardReply.deserializeBinary
  );

  list_shard(
    request: kv_pb.ListShardRequest,
    metadata?: grpcWeb.Metadata | null): Promise<kv_pb.ListShardReply>;

  list_shard(
    request: kv_pb.ListShardRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kv_pb.ListShardReply) => void): grpcWeb.ClientReadableStream<kv_pb.ListShardReply>;

  list_shard(
    request: kv_pb.ListShardRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kv_pb.ListShardReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.kv.KvService/list_shard',
        request,
        metadata || {},
        this.methodDescriptorlist_shard,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.kv.KvService/list_shard',
    request,
    metadata || {},
    this.methodDescriptorlist_shard);
  }

  methodDescriptorget_prefix = new grpcWeb.MethodDescriptor(
    '/placement.center.kv.KvService/get_prefix',
    grpcWeb.MethodType.UNARY,
    kv_pb.GetPrefixRequest,
    kv_pb.GetPrefixReply,
    (request: kv_pb.GetPrefixRequest) => {
      return request.serializeBinary();
    },
    kv_pb.GetPrefixReply.deserializeBinary
  );

  get_prefix(
    request: kv_pb.GetPrefixRequest,
    metadata?: grpcWeb.Metadata | null): Promise<kv_pb.GetPrefixReply>;

  get_prefix(
    request: kv_pb.GetPrefixRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kv_pb.GetPrefixReply) => void): grpcWeb.ClientReadableStream<kv_pb.GetPrefixReply>;

  get_prefix(
    request: kv_pb.GetPrefixRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kv_pb.GetPrefixReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/placement.center.kv.KvService/get_prefix',
        request,
        metadata || {},
        this.methodDescriptorget_prefix,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/placement.center.kv.KvService/get_prefix',
    request,
    metadata || {},
    this.methodDescriptorget_prefix);
  }

}

