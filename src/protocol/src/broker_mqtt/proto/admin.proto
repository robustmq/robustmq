syntax = "proto3";
package broker.mqtt.admin;
service MQTTBrokerAdminService {
    // cluster
    rpc cluster_status(ClusterStatusRequest) returns(ClusterStatusReply){}

    // user
    rpc mqtt_broker_create_user(CreateUserRequest) returns(CreateUserReply){}

    rpc mqtt_broker_delete_user(DeleteUserRequest) returns(DeleteUserReply){}

    rpc mqtt_broker_list_user(ListUserRequest) returns(ListUserReply){}

    // acl
    rpc mqtt_broker_list_acl(ListAclRequest) returns(ListAclReply){}

    rpc mqtt_broker_create_acl(CreateAclRequest) returns(CreateAclReply){}

    rpc mqtt_broker_delete_acl(DeleteAclRequest) returns(DeleteAclReply){}

    // blacklist
    rpc mqtt_broker_list_blacklist(ListBlacklistRequest) returns(ListBlacklistReply) {}

    rpc mqtt_broker_delete_blacklist(DeleteBlacklistRequest) returns(DeleteBlacklistReply) {}

    rpc mqtt_broker_create_blacklist(CreateBlacklistRequest) returns(CreateBlacklistReply) {}

    // connection
    rpc mqtt_broker_list_connection(ListConnectionRequest) returns(ListConnectionReply){}

    // observability: slow-sub
    rpc mqtt_broker_enable_slow_subscribe(EnableSlowSubscribeRequest) returns(EnableSlowSubScribeReply) {}
    rpc mqtt_broker_list_slow_subscribe(ListSlowSubscribeRequest) returns(ListSlowSubscribeReply){}
    rpc mqtt_broker_list_topic(ListTopicRequest) returns(ListTopicReply){}
}

// --------- cluster --------
message ClusterStatusRequest {

}
message ClusterStatusReply {
    string cluster_name = 1;
    repeated string nodes = 2;
}

// --------- user --------
message ListUserRequest {

}

message ListUserReply {
    repeated bytes users = 1;
}

message CreateUserRequest {
    string username = 1;

    string password = 2;

    bool is_superuser = 3;
}

message CreateUserReply {

}

message DeleteUserRequest {
    string username = 1;
}

message DeleteUserReply {

}

// --------- acl --------
message ListAclRequest{
    string cluster_name = 1;
}

message ListAclReply{
    repeated bytes acls = 1;
}

message DeleteAclRequest{
    string cluster_name = 1;
    bytes acl = 2;
}

message DeleteAclReply{

}

message CreateAclRequest{
    string cluster_name = 1;
    bytes acl = 2;
}

message CreateAclReply{

}

// --------- blacklist --------
message ListBlacklistRequest{
    string cluster_name = 1;
}

message ListBlacklistReply{
    repeated bytes blacklists = 1;
}

message CreateBlacklistRequest{
    string cluster_name = 1;

    bytes blacklist = 2;
}

message CreateBlacklistReply{

}

message DeleteBlacklistRequest{
    string cluster_name = 1;

    string blacklist_type = 2;

    string resource_name = 3;
}

message DeleteBlacklistReply{

}

// --------- connection --------
message ListConnectionRequest {

}

message ListConnectionReply {
    repeated ListConnectionRaw list_connection_raw = 1;
}

message ListConnectionRaw {
    uint64 connection_id = 1;
    string connection_type = 2;
    string protocol = 3;
    string source_addr = 4;
    string info = 5;
}

// --------- observability service --------
// --------- slow subscribe feature -------
message EnableSlowSubscribeRequest {
    bool is_enable = 1;
}

message EnableSlowSubScribeReply {
    bool is_enable = 1;
}

// --------- mqtt topic --------
enum MatchOption {
    E = 0;
    P = 1;
    S = 2;
}

message ListTopicRequest {
    string topic_name = 1;
    MatchOption match_option = 2;
}
message ListTopicReply {
    repeated MqttTopic topics = 1;
}
message MqttTopic {
    string topic_id = 1;
    string cluster_name = 2;
    string topic_name = 3;
    bool is_contain_retain_message = 4;
}

message ListSlowSubscribeRequest {

}

message ListSlowSubscribeReply {
    repeated ListSlowSubScribeRaw list_slow_subscribe_raw = 1;
}

message ListSlowSubScribeRaw {
    string client_id = 1;
    string topic = 2;
    uint32 time_ms = 3;
    string node_info = 4;
    uint64 create_time = 5;
}
