/*
 * Copyright (c) 2023 RobustMQ Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package placement.center.inner;

// The type of the cluster.
enum ClusterType{
    // The type of the PlacementCenter.
    PlacementCenter = 0;
    // The type of the JournalServer.
    JournalServer = 1;
    // The type of the MQTTBrokerServer.
    MQTTBrokerServer = 2;
    // The type of the AMQPBrokerServer.
    AMQPBrokerServer = 3;
}

service PlacementCenterService {

  rpc ClusterStatus(ClusterStatusRequest) returns(ClusterStatusReply){}

  rpc NodeList(NodeListRequest) returns(NodeListReply){}

  rpc RegisterNode(RegisterNodeRequest) returns(RegisterNodeReply){}

  rpc UnRegisterNode(UnRegisterNodeRequest) returns(UnRegisterNodeReply){}

  rpc Heartbeat(HeartbeatRequest) returns(HeartbeatReply){}

  rpc ReportMonitor(ReportMonitorRequest) returns(ReportMonitorReply){}

  rpc SetResourceConfig(SetResourceConfigRequest) returns(SetResourceConfigReply) {}

  rpc GetResourceConfig(GetResourceConfigRequest) returns(GetResourceConfigReply) {}

  rpc DeleteResourceConfig(DeleteResourceConfigRequest) returns(DeleteResourceConfigReply) {}

  rpc SetIdempotentData(SetIdempotentDataRequest) returns(SetIdempotentDataReply) {}

  rpc ExistsIdempotentData(ExistsIdempotentDataRequest) returns(ExistsIdempotentDataReply) {}

  rpc DeleteIdempotentData(DeleteIdempotentDataRequest) returns(DeleteIdempotentDataReply) {}

  rpc SaveOffsetData(SaveOffsetDataRequest) returns(SaveOffsetDataReply) {}

  rpc GetOffsetData(GetOffsetDataRequest) returns(GetOffsetDataReply) {}
}

message ClusterStatusRequest{

}

message ClusterStatusReply{
    string content = 1;
}

message NodeListRequest{
    string cluster_name = 1;
}

message NodeListReply{
    repeated bytes nodes = 1;

}

message RegisterNodeRequest{
    ClusterType cluster_type = 1;
    string cluster_name = 2;
    string node_ip = 3;
    uint64 node_id = 4;
    string node_inner_addr = 5;
    string extend_info = 6;
}

message RegisterNodeReply{

}

message UnRegisterNodeRequest{
    ClusterType cluster_type = 1;
    string cluster_name = 2;
    uint64 node_id = 3;
}

message UnRegisterNodeReply{

}

message HeartbeatRequest{
    ClusterType cluster_type = 1;
    string cluster_name = 2;
    uint64 node_id = 4;
}

message HeartbeatReply{

}

message ReportMonitorRequest{
    string cluster_name = 1;
    uint64 node_id = 2;
    float cpu_rate = 3;
    float memory_rate = 4;
    float disk_rate = 5;
    float network_rate = 6;
}

message ReportMonitorReply{

}

message SendRaftMessageRequest{
    bytes message = 1;
}

message SendRaftMessageReply{

}

message SendRaftConfChangeRequest{
    bytes message = 1;
}

message SendRaftConfChangeReply{
}

message SetResourceConfigRequest{
    string cluster_name = 1;
    repeated string resources = 2;
    bytes config = 3;
}

message SetResourceConfigReply{

}

message GetResourceConfigRequest{
    string cluster_name = 1;
    repeated string resources = 2;
}

message GetResourceConfigReply{
    bytes config = 1;
}

message DeleteResourceConfigRequest{
    string cluster_name = 1;
    repeated string resources = 2;
}

message DeleteResourceConfigReply{

}

message SetIdempotentDataRequest{
    string cluster_name = 1;
    string producer_id = 2;
    uint64 seq_num = 3;
}

message SetIdempotentDataReply{

}

message ExistsIdempotentDataRequest{
    string cluster_name = 1;
    string producer_id = 2;
    uint64 seq_num = 3;
}

message ExistsIdempotentDataReply{
    bool exists = 1;
}

message DeleteIdempotentDataRequest{
    string cluster_name = 1;
    string producer_id = 2;
    uint64 seq_num = 3;
}

message DeleteIdempotentDataReply{

}

message SaveOffsetDataRequest{
    string cluster_name = 1;
    string group = 2;
    repeated SaveOffsetDataRequestOffset offsets = 3;
}

message SaveOffsetDataRequestOffset{
    string namespace = 1;
    string shard_name = 2;
    uint64 offset = 3;
}

message SaveOffsetDataReply{

}

message GetOffsetDataRequest{
    string cluster_name = 1;
    string group = 2;
}


message GetOffsetDataReply{
    repeated GetOffsetDataReplyOffset offsets = 1;
}

message GetOffsetDataReplyOffset{
    string namespace = 1;
    string shard_name = 2;
    uint64 offset = 3;
}