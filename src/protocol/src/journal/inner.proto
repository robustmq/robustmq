/*
 * Copyright 2023 RobustMQ Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package journal.inner;

service JournalServerInnerService {
  rpc UpdateCache(UpdateJournalCacheRequest) returns (UpdateJournalCacheReply) {}
  rpc DeleteShardFile(DeleteShardFileRequest) returns (DeleteShardFileReply) {}
  rpc GetShardDeleteStatus(GetShardDeleteStatusRequest) returns (GetShardDeleteStatusReply) {}
  rpc DeleteSegmentFile(DeleteSegmentFileRequest) returns (DeleteSegmentFileReply) {}
  rpc GetSegmentDeleteStatus(GetSegmentDeleteStatusRequest) returns (GetSegmentDeleteStatusReply) {}
}

message UpdateJournalCacheRequest {
  string cluster_name = 1;
  JournalUpdateCacheActionType action_type = 2;
  JournalUpdateCacheResourceType resource_type = 3;
  string data = 4;
}

message UpdateJournalCacheReply {}

message DeleteShardFileRequest {
  string cluster_name = 1;
  string namespace = 2;
  string shard_name = 3;
}

message DeleteShardFileReply {}

message GetShardDeleteStatusRequest {
  string cluster_name = 1;
  string namespace = 2;
  string shard_name = 3;
}

message GetShardDeleteStatusReply {
  bool status = 1;
}

message DeleteSegmentFileRequest {
  string cluster_name = 1;
  string namespace = 2;
  string shard_name = 3;
  uint32 segment = 4;
}

message DeleteSegmentFileReply {}

message GetSegmentDeleteStatusRequest {
  string cluster_name = 1;
  string namespace = 2;
  string shard_name = 3;
  uint32 segment = 4;
}

message GetSegmentDeleteStatusReply {
  bool status = 1;
}

enum JournalUpdateCacheActionType {
  Set = 0;
  Delete = 1;
}

enum JournalUpdateCacheResourceType {
  JournalNode = 0;
  Shard = 1;
  Segment = 2;
  SegmentMeta = 3;
}
