# Copyright 2023 RobustMQ Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# GitLab CI Configuration for RobustMQ
# Advantages: 25GB disk space (vs GitHub's 14GB)

# ==================== Global Configuration ====================

default:
  image: rust:latest
  
# Cache Cargo dependencies globally
variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

cache:
  key: cargo-cache-$CI_COMMIT_REF_SLUG
  paths:
    - .cargo/bin/
    - .cargo/registry/index/
    - .cargo/registry/cache/
    - .cargo/git/db/

stages:
  - check
  - test
  - integration

# ==================== Code Quality Checks ====================

rustfmt:
  stage: check
  script:
    - rustup component add rustfmt
    - cargo fmt --all -- --check
  cache: {}  # No cache needed for format check

clippy:
  stage: check
  before_script:
    - rustup component add clippy
    - apt-get update && apt-get install -y protobuf-compiler llvm libclang-dev cmake pkg-config libssl-dev clang lld
  script:
    - export CARGO_BUILD_JOBS=10
    - cargo clippy --workspace --all-targets --tests -- -D warnings
  after_script:
    - du -sh target/ || true

cargo-deny:
  stage: check
  before_script:
    - cargo install cargo-deny || true
  script:
    - cargo-deny check licenses
  cache:
    key: cargo-tools
    paths:
      - .cargo/bin/

typos:
  stage: check
  before_script:
    - cargo install typos-cli || true
  script:
    - typos
  cache:
    key: cargo-tools
    paths:
      - .cargo/bin/

# ==================== Security Audit ====================

security-audit:
  stage: check
  before_script:
    - cargo install cargo-audit || true
  script:
    - cargo audit || echo "Audit warnings found"
  cache:
    key: cargo-tools
    paths:
      - .cargo/bin/
  allow_failure: true

# ==================== Unit Tests (Parallel) ====================

.unit-test-template: &unit_test_template
  stage: test
  before_script:
    - apt-get update && apt-get install -y protobuf-compiler llvm libclang-dev cmake pkg-config libssl-dev clang lld
    - cargo install cargo-nextest || true
  script:
    - export CARGO_BUILD_JOBS=10
    - |
      cargo nextest run \
        --profile=ci \
        $TEST_PACKAGES \
        --filter-expr '!(test(meta) & package(storage-adapter))'
  after_script:
    - df -h
  artifacts:
    when: on_failure
    paths:
      - target/nextest/
    expire_in: 1 day

unit-test-core:
  <<: *unit_test_template
  variables:
    TEST_PACKAGES: "-p broker-core -p common-base -p common-config -p common-metrics -p metadata-struct -p common-security -p rate-limit"

unit-test-brokers:
  <<: *unit_test_template
  variables:
    TEST_PACKAGES: "-p mqtt-broker -p admin-server -p broker-server"

unit-test-storage:
  <<: *unit_test_template
  variables:
    TEST_PACKAGES: "-p storage-adapter -p meta-service -p journal-server -p journal-client -p schema-register"

unit-test-protocol:
  <<: *unit_test_template
  variables:
    TEST_PACKAGES: "-p protocol -p network-server -p rocksdb-engine"

# ==================== Integration Tests (Parallel) ====================

.integration-test-template: &integration_test_template
  stage: integration
  before_script:
    - apt-get update && apt-get install -y protobuf-compiler llvm libclang-dev cmake pkg-config libssl-dev clang lld
    - cargo install cargo-nextest || true
    - echo "Initial disk space:"
    - df -h
  script:
    # Build broker-server in release mode (with lld linker)
    - export CARGO_BUILD_JOBS=8
    - export CARGO_PROFILE_RELEASE_LTO=thin
    - export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
    - export CARGO_PROFILE_RELEASE_DEBUG=false
    - export CARGO_PROFILE_RELEASE_STRIP=symbols
    - echo "Building broker-server..."
    - cargo build --release --package cmd --bin broker-server
    - echo "After build:"
    - df -h
    # Start broker
    - nohup target/release/broker-server >> broker.log 2>&1 &
    - sleep 5
    # Run tests
    - echo "Running $TEST_NAME tests..."
    - cargo nextest run $TEST_PACKAGES --test mod -- $TEST_FILTER
  after_script:
    - echo "Final disk usage:"
    - df -h
    - du -sh target/ || true
    - pkill -f broker-server || true
  artifacts:
    when: on_failure
    paths:
      - broker.log
    expire_in: 1 day

integration-test-meta:
  <<: *integration_test_template
  variables:
    TEST_NAME: "Meta"
    TEST_FILTER: "meta"
    TEST_PACKAGES: "--package grpc-clients --package robustmq-test"

integration-test-journal:
  <<: *integration_test_template
  variables:
    TEST_NAME: "Journal"
    TEST_FILTER: "journal"
    TEST_PACKAGES: "--package robustmq-test"

integration-test-mqtt:
  <<: *integration_test_template
  variables:
    TEST_NAME: "MQTT"
    TEST_FILTER: "mqtt"
    TEST_PACKAGES: "--package robustmq-test"

# ==================== Optional: Build Documentation ====================

pages:
  stage: .post
  script:
    - cargo doc --workspace --no-deps --document-private-items
    - mv target/doc public
  artifacts:
    paths:
      - public
  only:
    - main
    - master
  when: manual

