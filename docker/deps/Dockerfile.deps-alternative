# Alternative Dockerfile using multi-stage build to avoid package manager issues
FROM rust:1.90.0-bookworm as builder

# Stage 1: Install basic tools
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Stage 2: Install LLVM/Clang from precompiled binaries
COPY install-llvm-precompiled.sh /tmp/
RUN chmod +x /tmp/install-llvm-precompiled.sh && \
    /tmp/install-llvm-precompiled.sh

# Stage 3: Install other dependencies
COPY install-deps-staged.sh /tmp/
RUN chmod +x /tmp/install-deps-staged.sh && \
    /tmp/install-deps-staged.sh

# Stage 4: Install Rust dependencies
WORKDIR /build
COPY Cargo.toml Cargo.lock ./
COPY src/ ./src/

# Install cargo-chef
RUN cargo install cargo-chef

# Generate recipe
RUN cargo chef prepare --recipe-path recipe.json

# Cook dependencies
RUN --mount=type=cache,target=/build/.sccache \
    --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    cargo chef cook --release --workspace --recipe-path recipe.json

# Final stage
FROM rust:1.90.0-bookworm

# Copy precompiled LLVM
COPY --from=builder /opt/llvm /opt/llvm
COPY --from=builder /usr/local/bin/clang /usr/local/bin/clang
COPY --from=builder /usr/local/bin/clang++ /usr/local/bin/clang++
COPY --from=builder /usr/local/bin/lld /usr/local/bin/lld
COPY --from=builder /usr/local/bin/llvm-config /usr/local/bin/llvm-config

# Install runtime dependencies
COPY install-runtime.sh /tmp/
RUN chmod +x /tmp/install-runtime.sh && \
    /tmp/install-runtime.sh

# Copy cooked dependencies
COPY --from=builder /build/target /build/target

# Set environment variables
ENV LLVM_CONFIG=/opt/llvm/bin/llvm-config
ENV PATH=/opt/llvm/bin:$PATH
ENV CARGO_TARGET_DIR=/build/target
ENV CARGO_INCREMENTAL=1

# Health check
RUN clang --version && lld --version

WORKDIR /build
