# Copyright 2023 RobustMQ Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3.8'

services:
  # ==============================================================================
  # All-in-One Deployment (Recommended for development and testing)
  # ==============================================================================
  robustmq:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: all-in-one
    container_name: robustmq
    ports:
      - "1883:1883"    # MQTT TCP
      - "1884:1884"    # MQTT SSL
      - "8083:8083"    # MQTT WebSocket
      - "8084:8084"    # MQTT WebSocket SSL
      - "9092:9092"    # Kafka
      - "1228:1228"    # gRPC
      - "5672:5672"    # AMQP
    volumes:
      - robustmq_data:/robustmq/data
      - robustmq_logs:/robustmq/logs
      - ./config:/robustmq/config:ro
    environment:
      - ROBUSTMQ_ROLES=meta,broker,journal
      - ROBUSTMQ_CONFIG_PATH=/robustmq/config/server.toml
      - ROBUSTMQ_LOG_PATH=/robustmq/logs
      - ROBUSTMQ_DATA_PATH=/robustmq/data
      - RUST_LOG=info
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ==============================================================================
  # Microservices Deployment (for production cluster)
  # ==============================================================================
  
  # Meta Service (Placement Center)
  meta-service:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: meta-service
    container_name: robustmq-meta
    ports:
      - "1228:1228"
    volumes:
      - meta_data:/robustmq/data
      - meta_logs:/robustmq/logs
      - ./config:/robustmq/config:ro
    environment:
      - ROBUSTMQ_ROLES=meta
      - ROBUSTMQ_CONFIG_PATH=/robustmq/config/meta-service.toml
    restart: unless-stopped
    profiles: ["microservices"]

  # MQTT Broker
  mqtt-broker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: mqtt-broker
    container_name: robustmq-mqtt
    ports:
      - "1883:1883"
      - "1884:1884"
      - "8083:8083"
      - "8084:8084"
    volumes:
      - mqtt_data:/robustmq/data
      - mqtt_logs:/robustmq/logs
      - ./config:/robustmq/config:ro
    environment:
      - ROBUSTMQ_ROLES=broker
      - ROBUSTMQ_CONFIG_PATH=/robustmq/config/mqtt-broker.toml
    depends_on:
      - meta-service
    restart: unless-stopped
    profiles: ["microservices"]

  # Journal Service
  journal-service:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: journal-service
    container_name: robustmq-journal
    ports:
      - "1229:1228"
    volumes:
      - journal_data:/robustmq/data
      - journal_logs:/robustmq/logs
      - ./config:/robustmq/config:ro
    environment:
      - ROBUSTMQ_ROLES=journal
      - ROBUSTMQ_CONFIG_PATH=/robustmq/config/journal-service.toml
    depends_on:
      - meta-service
    restart: unless-stopped
    profiles: ["microservices"]

  # ==============================================================================
  # Monitoring and Observability (Optional)
  # ==============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: robustmq-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: robustmq-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    profiles: ["monitoring"]

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: robustmq-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    profiles: ["monitoring"]

# ==============================================================================
# Named Volumes
# ==============================================================================
volumes:
  robustmq_data:
    driver: local
  robustmq_logs:
    driver: local
  meta_data:
    driver: local
  meta_logs:
    driver: local
  mqtt_data:
    driver: local
  mqtt_logs:
    driver: local
  journal_data:
    driver: local
  journal_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==============================================================================
# Networks
# ==============================================================================
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16