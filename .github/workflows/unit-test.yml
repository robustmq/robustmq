# Copyright 2023 RobustMQ Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Unit Test

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/pull_request_template.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/pull_request_template.md"

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Grant necessary permissions for package access
permissions:
  contents: read
  packages: read

env:
  CARGO_TERM_COLOR: always

jobs:
  unit-tests:
    name: ${{ matrix.group }}
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Reduced from 60 (tests are much faster now)
    strategy:
      fail-fast: false
      matrix:
        include:
          - group: "Core & Common"
            packages: "-p broker-core -p common-base -p common-config -p common-metrics -p metadata-struct -p common-security -p rate-limit"
          - group: "Brokers"
            packages: "-p mqtt-broker -p admin-server -p broker-server"
          - group: "Storage & Services"
            packages: "-p storage-adapter -p meta-service -p journal-server -p journal-client -p schema-register"
          - group: "Protocol & Network"
            packages: "-p protocol -p network-server -p rocksdb-engine"
    container:
      # 🚀 Use pre-built image with all dependencies for faster CI
      # Built from: docker/Dockerfile.deps (offline build)
      # To build: make docker-deps
      # Image must be manually pushed to ghcr.io/robustmq/robustmq/rust-deps:latest
      image: ghcr.io/robustmq/robustmq/rust-deps:latest
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    env:
      CARGO_BUILD_JOBS: 16
      CARGO_INCREMENTAL: 0
      CARGO_TARGET_DIR: /build/target
      RUST_BACKTRACE: 1
      PROTOC: /usr/bin/protoc
      # Cache optimization
      RUSTC_WRAPPER: sccache
      SCCACHE_DIR: /build/.sccache
      # Logging optimization
      CARGO_LOG: warn
      RUST_LOG: warn
      # Build optimization - speed up compilation for CI
      CARGO_PROFILE_DEV_DEBUG: 0
      CARGO_PROFILE_DEV_STRIP: true
      CARGO_PROFILE_DEV_CODEGEN_UNITS: 256
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install protoc and cmake if missing
        run: |
          echo "🔧 Checking protoc availability..."
          if ! protoc --version >/dev/null 2>&1; then
            echo "⚠️ protoc not found, installing..."
            apt-get update
            apt-get install -y protobuf-compiler
            echo "✅ protoc installed successfully"
          else
            echo "✅ protoc already available"
          fi
          protoc --version
          echo "PROTOC: $PROTOC"
          
          echo "🔧 Checking cmake availability..."
          if ! cmake --version >/dev/null 2>&1; then
            echo "⚠️ cmake not found, installing..."
            apt-get update
            apt-get install -y cmake
            echo "✅ cmake installed successfully"
          else
            echo "✅ cmake already available"
          fi
          cmake --version

      - name: Cache image info
        run: |
          echo "📦 Using pre-built cache image: ghcr.io/robustmq/robustmq/rust-deps:latest"
          echo "✅ Cache image is automatically pulled by GitHub Actions container"

      - name: Show dependency cache status
        run: |
          echo "📦 Image: ghcr.io/robustmq/robustmq/rust-deps:latest"
          echo "🔍 Checking pre-compiled dependencies..."
          if [ -d "/build/target" ]; then
            echo "✅ Found dependency cache!"
            du -sh /build/target 2>/dev/null || echo "Cache size: N/A"
            echo "📊 Cache contents:"
            ls -la /build/target/debug/deps/ | head -10 || echo "No debug deps found"
            ls -la /build/target/release/deps/ | head -10 || echo "No release deps found"
            echo "🔍 Checking for compiled crates:"
            find /build/target -name "*.rlib" | wc -l | xargs echo "Compiled libraries:"
            find /build/target -name "*.rmeta" | wc -l | xargs echo "Metadata files:"
          else
            echo "⚠️ No cache found (will compile from scratch)"
          fi
          echo ""
          echo "🔧 Installed tools:"
          cargo --version
          cargo nextest --version || echo "nextest not found"
          echo ""
          echo "🔗 Linker tools:"
          clang --version || echo "clang not found"
          lld --version || echo "lld not found"
          echo ""
          echo "🔧 Protocol Buffers:"
          protoc --version || echo "protoc not found"
          echo "PROTOC: $PROTOC"
          echo ""
          echo "📋 Environment variables:"
          echo "CARGO_TARGET_DIR: $CARGO_TARGET_DIR"
          echo "CARGO_INCREMENTAL: $CARGO_INCREMENTAL"

      - name: Verify cache usage
        run: |
          echo "🔍 Verifying cache usage..."
          if [ -d "/build/target" ]; then
            echo "📊 Cache statistics before build:"
            du -sh /build/target 2>/dev/null || echo "Cache size: N/A"
            echo "📦 Cached dependencies count:"
            find /build/target -name "*.rlib" | wc -l | xargs echo "Libraries:"
            find /build/target -name "*.rmeta" | wc -l | xargs echo "Metadata:"
          fi

      - name: Build project code
        run: |
          echo "🔨 Building ${{ matrix.group }}..."
          echo "📋 Build environment:"
          echo "  CARGO_TARGET_DIR: $CARGO_TARGET_DIR"
          echo "  CARGO_INCREMENTAL: $CARGO_INCREMENTAL"
          echo "  CARGO_BUILD_JOBS: $CARGO_BUILD_JOBS"
          echo ""
          cargo build --workspace ${{ matrix.packages }} --tests
          echo "✅ Build complete!"
          
          # Show cache usage after build
          if [ -d "/build/target" ]; then
            echo "📊 Cache statistics after build:"
            du -sh /build/target 2>/dev/null || echo "Cache size: N/A"
          fi

      - name: Run ${{ matrix.group }} tests
        run: |
          echo "🧪 Running ${{ matrix.group }} tests..."
          # Match makefile test command: exclude robustmq-test, grpc-clients
          cargo nextest run \
            --profile=ci \
            ${{ matrix.packages }} \
            --filter-expr '!(test(meta) & package(storage-adapter))'

      - name: Test Summary
        if: always()
        run: |
          echo "## 🧪 ${{ matrix.group }} Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Clean test artifacts
        if: always()
        run: |
          # Minimal cleanup (we're using pre-built deps)
          rm -rf target/nextest
          rm -rf target/debug/incremental
          find target -name "*test*" -type f -delete 2>/dev/null || true
