# Copyright 2023 RobustMQ Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Ig All Test

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/pull_request_template.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/pull_request_template.md"

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  # Split tests into separate jobs to avoid disk space issues
  # Each job gets independent 14GB disk space
  integration-tests:
    name: ${{ matrix.test-name }}
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - test-name: "Meta Tests"
            test-filter: "meta"
            test-packages: "--package grpc-clients --package robustmq-test"
          - test-name: "Journal Tests"
            test-filter: "journal"
            test-packages: "--package robustmq-test"
          - test-name: "MQTT Tests"
            test-filter: "mqtt"
            test-packages: "--package robustmq-test"
    container:
      image: rust:latest
    steps:
      - name: Check initial disk space
        run: df -h

      - name: Free up disk space before build
        run: |
          # Aggressive disk space cleanup
          echo "Initial disk space:"
          df -h
          # Remove all unnecessary system files
          rm -rf /usr/share/dotnet 2>/dev/null || true
          rm -rf /usr/local/lib/android 2>/dev/null || true
          rm -rf /opt/ghc 2>/dev/null || true
          rm -rf /opt/hostedtoolcache/CodeQL 2>/dev/null || true
          rm -rf /usr/share/swift 2>/dev/null || true
          rm -rf /usr/local/share/boost 2>/dev/null || true
          rm -rf /usr/local/.ghcup 2>/dev/null || true
          rm -rf /usr/share/miniconda 2>/dev/null || true
          rm -rf /usr/local/share/chromium 2>/dev/null || true
          # Clean package caches
          apt-get clean
          rm -rf /var/lib/apt/lists/* 2>/dev/null || true
          # Clean docker if any
          docker system prune -af 2>/dev/null || true
          echo "After cleanup:"
          df -h

      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: set up build configure
        uses: ./.github/actions/setup-builder

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Optimize build environment
        run: |
          # Aggressive space-saving compiler flags
          echo "CARGO_PROFILE_RELEASE_LTO=thin" >> $GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1" >> $GITHUB_ENV
          # No debug info at all (saves ~50% space)
          echo "CARGO_PROFILE_RELEASE_DEBUG=false" >> $GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_STRIP=symbols" >> $GITHUB_ENV
          # Reduce parallel jobs to save memory and disk
          echo "CARGO_BUILD_JOBS=4" >> $GITHUB_ENV
          # Disable incremental (saves space)
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
          # Skip sccache to save disk space (critical for 14GB limit)
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV

      - name: Check disk space before test
        run: df -h

      - name: Build broker-server in release mode
        run: |
          echo "Building broker-server (with minimal dependencies)..."
          # Only build broker-server and its direct dependencies
          cargo build --release --package cmd --bin broker-server
          echo "Build complete, checking space..."
          df -h
          # Immediately clean build artifacts we don't need
          echo "Cleaning build artifacts..."
          rm -rf target/release/deps/*.rlib 2>/dev/null || true
          rm -rf target/release/build 2>/dev/null || true
          rm -rf target/release/incremental 2>/dev/null || true
          rm -rf target/release/.fingerprint 2>/dev/null || true
          echo "After cleanup:"
          df -h

      - name: Start broker-server
        run: |
          echo "Starting broker-server..."
          nohup target/release/broker-server >> broker.log 2>&1 &
          # Wait for broker to start
          sleep 5
          echo "Broker started"

      - name: Run ${{ matrix.test-name }}
        run: |
          echo "Running ${{ matrix.test-name }}..."
          cargo nextest run ${{ matrix.test-packages }} --test mod -- ${{ matrix.test-filter }}

      - name: Show broker logs on failure
        if: failure()
        run: |
          echo "=== Broker logs ==="
          tail -100 broker.log || true

      - name: Check disk space after test
        if: always()
        run: df -h

      - name: Show target directory size
        if: always()
        run: du -sh target/* | sort -rh | head -10

      - name: Clean test artifacts
        if: always()
        run: |
          # Kill broker
          pkill -f broker-server || true
          # Clean test artifacts
          rm -rf target/nextest
          rm -rf target/release/broker-server
          rm -rf target/release/deps/broker_server*
          rm -rf target/release/incremental
          rm -rf broker.log

      - name: Check disk space after cleanup
        if: always()
        run: df -h

      - name: Show sccache stats
        if: always()
        continue-on-error: true
        run: sccache --show-stats || echo "sccache not available"
